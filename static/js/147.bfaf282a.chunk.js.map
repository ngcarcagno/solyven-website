{"version":3,"file":"static/js/147.bfaf282a.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    const url = \"\"; // Fill in your API URL here\r\n\r\n    try {\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        const response = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          notification[\"error\"]({\r\n            message: \"Error\",\r\n            description:\r\n              \"There was an error sending your message, please try again later.\",\r\n          });\r\n        } else {\r\n          event.target.reset();\r\n          setFormState(() => ({\r\n            values: { ...initialValues },\r\n            errors: { ...initialValues },\r\n          }));\r\n\r\n          notification[\"success\"]({\r\n            message: \"Success\",\r\n            description: \"Your message has been sent!\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit form. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{name}</Label>\r\n    <StyledInput placeholder={placeholder} name={name} id={name} onChange={onChange} />\r\n  </Container>\r\n);\r\n\r\nexport default Input;\r\n","import { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst TextArea = ({ name, placeholder, onChange }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{name}</Label>\r\n    <StyledTextArea placeholder={placeholder} id={name} name={name} onChange={onChange} />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default TextArea;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  width: 100%;\r\n  max-width: 1200px; /* Contenedor más ancho */\r\n  margin: 0 auto; /* Centrar el contenedor */\r\n  padding: 5rem 3rem; /* Más padding horizontal */\r\n  position: relative;\r\n  min-height: 100vh;\r\n  scroll-snap-align: start;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  h6 {\r\n    text-align: center; /* center the title text */\r\n    margin: 0 0 1rem 0;\r\n    font-size: 2rem;\r\n  }\r\n\r\n  p {\r\n    text-align: center; /* center the subtitle */\r\n    max-width: 720px;\r\n    margin: 0 0 1.5rem 0;\r\n  }\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 2rem; /* Mantener buen padding en tablets */\r\n    max-width: 900px;\r\n    h6 {\r\n      font-size: 1.6rem;\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    padding: 2.5rem 1.5rem; /* Mejor balance en móviles */\r\n    max-width: 600px;\r\n    h6 {\r\n      font-size: 1.5rem;\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 480px) {\r\n    padding: 2rem 1rem; /* Mínimo padding en pantallas muy pequeñas */\r\n    h6 {\r\n      font-size: 1.4rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  /* Modern glassy card - optimizado para ser más ancho y corto */\r\n  width: 100%;\r\n  max-width: 900px; /* Ancho máximo más generoso */\r\n  min-width: 320px; /* Ancho mínimo para móviles */\r\n  box-sizing: border-box;\r\n  margin: 0 auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr; /* Dos columnas por defecto */\r\n  grid-gap: 1.5rem;\r\n  align-items: start;\r\n\r\n  /* El textarea y botón ocupan toda la fila */\r\n  & > div:nth-child(3), /* TextArea */\r\n  & > div:last-child {\r\n    /* ButtonContainer */\r\n    grid-column: 1 / -1;\r\n  }\r\n\r\n  /* En tablets: mantener dos columnas pero más espacio */\r\n  @media only screen and (max-width: 1024px) {\r\n    max-width: 750px;\r\n    grid-gap: 1.25rem;\r\n  }\r\n\r\n  /* En móviles: una sola columna */\r\n  @media only screen and (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n    max-width: 500px;\r\n    grid-gap: 1rem;\r\n\r\n    & > div:nth-child(3),\r\n    & > div:last-child {\r\n      grid-column: 1;\r\n    }\r\n  }\r\n\r\n  /* glass effect*/\r\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.04));\r\n  border-radius: 16px;\r\n  border: 1px solid rgba(255, 255, 255, 0.12);\r\n  backdrop-filter: blur(10px);\r\n  -webkit-backdrop-filter: blur(10px);\r\n  box-shadow: 0 14px 34px rgba(0, 0, 0, 0.65);\r\n  padding: 2rem;\r\n  transition: transform 240ms ease, box-shadow 240ms ease;\r\n\r\n  &:hover {\r\n    transform: translateY(-4px);\r\n    box-shadow: 0 20px 48px rgba(0, 0, 0, 0.7);\r\n  }\r\n\r\n  /* ensure Ant Col and inputs take full width */\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  /* style native inputs/textarea inside the form to match glass card */\r\n  input,\r\n  textarea {\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    background: rgba(255, 255, 255, 0.03); /* lighter input bg */\r\n    border-radius: 8px;\r\n    border: 1px solid rgba(255, 255, 255, 0.06);\r\n    padding: 0.85rem 1rem;\r\n    color: var(--color-text-primary);\r\n    outline: none;\r\n    transition: box-shadow 180ms ease, border-color 180ms ease, background 180ms ease;\r\n  }\r\n\r\n  input::placeholder,\r\n  textarea::placeholder {\r\n    color: rgba(255, 255, 255, 0.55);\r\n  }\r\n\r\n  input:focus,\r\n  textarea:focus {\r\n    border-color: rgba(255, 130, 92, 0.95);\r\n    box-shadow: 0 6px 18px rgba(255, 130, 92, 0.1);\r\n    background: rgba(255, 255, 255, 0.04);\r\n  }\r\n\r\n  label {\r\n    display: block;\r\n    margin-bottom: 0.25rem;\r\n    color: rgba(255, 255, 255, 0.9);\r\n    font-weight: 600;\r\n  }\r\n\r\n  /* Responsive adjustments */\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 1.25rem;\r\n  }\r\n\r\n  @media only screen and (max-width: 480px) {\r\n    padding: 0.75rem; /* reduce inner padding on very small screens */\r\n    border-radius: 12px;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: var(--color-secondary);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  button {\r\n    border-radius: 8px;\r\n  }\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Slide direction=\"up\" triggerOnce>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Col lg={24} md={24} sm={24} xs={24}>\r\n            <h6>{title}</h6>\r\n            <p>{content}</p>\r\n          </Col>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Col lg={24} md={24} sm={24} xs={24}>\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"Nombre\"\r\n                  placeholder=\"Tu Nombre\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"Email\"\r\n                  placeholder=\"Tu Correo Electrónico\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Tu Mensaje\"\r\n                  value={values.message || \"\"}\r\n                  name=\"Mensaje\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">Submit</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n      </Slide>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n"],"names":["initialValues","name","email","message","validate","values","errors","test","Container","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","StyledContainer","StyledTextArea","Label","_templateObject3","_ref","placeholder","onChange","_jsxs","children","_jsx","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","title","content","handleChange","handleSubmit","formState","setFormState","useState","_objectSpread","event","persist","value","target","prevState","async","preventDefault","Object","every","error","fetch","method","headers","body","JSON","stringify","ok","reset","notification","description","useForm","ValidationType","_ref2","type","ErrorMessage","Slide","direction","triggerOnce","Row","justify","align","Col","lg","md","sm","xs","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}