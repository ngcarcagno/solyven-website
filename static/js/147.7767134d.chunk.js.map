{"version":3,"file":"static/js/147.7767134d.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    const url = \"\"; // Fill in your API URL here\r\n\r\n    try {\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        const response = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          notification[\"error\"]({\r\n            message: \"Error\",\r\n            description:\r\n              \"There was an error sending your message, please try again later.\",\r\n          });\r\n        } else {\r\n          event.target.reset();\r\n          setFormState(() => ({\r\n            values: { ...initialValues },\r\n            errors: { ...initialValues },\r\n          }));\r\n\r\n          notification[\"success\"]({\r\n            message: \"Success\",\r\n            description: \"Your message has been sent!\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit form. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 0.625em 0.3125em; /* Proportional padding */\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875em; /* Proportional font size */\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 0.625em 0.3125em; /* Proportional padding */\r\n  margin-bottom: -0.625em; /* Proportional margin */\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875em; /* Proportional font size */\r\n  height: 11.5625em; /* Proportional height */\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 0.625em; /* Proportional padding */\r\n  text-transform: capitalize;\r\n`;\r\n","import { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{name}</Label>\r\n    <StyledInput placeholder={placeholder} name={name} id={name} onChange={onChange} />\r\n  </Container>\r\n);\r\n\r\nexport default Input;\r\n","import { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst TextArea = ({ name, placeholder, onChange }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{name}</Label>\r\n    <StyledTextArea placeholder={placeholder} id={name} name={name} onChange={onChange} />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default TextArea;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  position: relative;\r\n  min-height: 100vh;\r\n  scroll-snap-align: start;\r\n  padding: 0 2em; /* Same as MiddleBlockSection - horizontal only */\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center; /* Same as MiddleBlockSection - center vertically */\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 0 1.5em; /* Same as MiddleBlockSection mobile padding */\r\n  }\r\n`;\r\n\r\nexport const ContactContentWrapper = styled(\"div\")`\r\n  max-width: min(85vw, 570px); /* Same as MiddleBlock ContentWrapper */\r\n  width: 100%;\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 56.25em;\r\n  min-width: 20em;\r\n  box-sizing: border-box;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1em;\r\n\r\n  /* glass effect */\r\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.04));\r\n  border-radius: 1em;\r\n  border: 1px solid rgba(255, 255, 255, 0.12);\r\n  backdrop-filter: blur(10px);\r\n  -webkit-backdrop-filter: blur(10px);\r\n  box-shadow: 0 0.875em 2.125em rgba(0, 0, 0, 0.65);\r\n  padding: 1.25em;\r\n  transition: transform 240ms ease, box-shadow 240ms ease;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    max-width: 90vw;\r\n    padding: 1em;\r\n    gap: 0.75em;\r\n  }\r\n\r\n  @media only screen and (max-width: 480px) {\r\n    max-width: 95vw;\r\n    padding: 1em;\r\n    gap: 1em;\r\n  }\r\n\r\n  &:hover {\r\n    transform: translateY(-0.25em);\r\n    box-shadow: 0 1.25em 3em rgba(0, 0, 0, 0.7);\r\n  }\r\n\r\n  /* Ant Col takes full width */\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  /* Input styles */\r\n  input,\r\n  textarea {\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    background: rgba(255, 255, 255, 0.03);\r\n    border-radius: 0.5em;\r\n    border: 1px solid rgba(255, 255, 255, 0.06);\r\n    padding: 0.75em 1em;\r\n    color: var(--color-text-primary);\r\n    outline: none;\r\n    transition: box-shadow 180ms ease, border-color 180ms ease, background 180ms ease;\r\n  }\r\n\r\n  input::placeholder,\r\n  textarea::placeholder {\r\n    color: rgba(255, 255, 255, 0.55);\r\n  }\r\n\r\n  input:focus,\r\n  textarea:focus {\r\n    border-color: rgba(255, 130, 92, 0.95);\r\n    box-shadow: 0 0.375em 1.125em rgba(255, 130, 92, 0.1);\r\n    background: rgba(255, 255, 255, 0.04);\r\n  }\r\n\r\n  label {\r\n    display: block;\r\n    margin-bottom: 0.25em;\r\n    color: rgba(255, 255, 255, 0.9);\r\n    font-weight: 600;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: var(--color-secondary);\r\n  height: 1em;\r\n  padding: 0 0.5em;\r\n  font-size: 0.875em;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n  margin-top: 0.5em;\r\n\r\n  button {\r\n    border-radius: 0.5em;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n\r\n    button {\r\n      width: 100%;\r\n      padding: 0.875em 1em;\r\n    }\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, ContactContentWrapper, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Slide direction=\"up\" triggerOnce>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <ContactContentWrapper>\r\n            <Col lg={24} md={24} sm={24} xs={24}>\r\n              <h6>{title}</h6>\r\n              <p>{content}</p>\r\n              <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"Nombre\"\r\n                  placeholder=\"Tu Nombre\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"Email\"\r\n                  placeholder=\"Tu Correo Electrónico\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Tu Mensaje\"\r\n                  value={values.message || \"\"}\r\n                  name=\"Mensaje\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n                <ButtonContainer>\r\n                  <Button name=\"submit\">Submit</Button>\r\n                </ButtonContainer>\r\n              </FormGroup>\r\n            </Col>\r\n          </ContactContentWrapper>\r\n        </Row>\r\n      </Slide>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n"],"names":["initialValues","name","email","message","validate","values","errors","test","Container","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","StyledContainer","StyledTextArea","Label","_templateObject3","_ref","placeholder","onChange","_jsxs","children","_jsx","htmlFor","id","ContactContainer","ContactContentWrapper","FormGroup","Span","_templateObject4","ButtonContainer","_templateObject5","title","content","handleChange","handleSubmit","formState","setFormState","useState","_objectSpread","event","persist","value","target","prevState","async","preventDefault","Object","every","error","fetch","method","headers","body","JSON","stringify","ok","reset","notification","description","useForm","ValidationType","_ref2","type","ErrorMessage","Slide","direction","triggerOnce","Row","justify","align","Col","lg","md","sm","xs","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}