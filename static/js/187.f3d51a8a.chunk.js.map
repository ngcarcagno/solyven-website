{"version":3,"file":"static/js/187.f3d51a8a.chunk.js","mappings":"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","sources":["components/TexComponents/DecryptedText.js","components/FullViewport/FullViewport.tsx","components/FullViewport/FullViewportSection.tsx","components/ContentBlock/index.tsx"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport { motion } from \"motion/react\";\r\n\r\nconst styles = {\r\n  wrapper: {\r\n    display: \"inline-block\",\r\n    whiteSpace: \"pre-wrap\",\r\n  },\r\n  srOnly: {\r\n    position: \"absolute\",\r\n    width: \"1px\",\r\n    height: \"1px\",\r\n    padding: 0,\r\n    margin: \"-1px\",\r\n    overflow: \"hidden\",\r\n    clip: \"rect(0,0,0,0)\",\r\n    border: 0,\r\n  },\r\n};\r\n\r\nexport default function DecryptedText({\r\n  text,\r\n  speed = 50,\r\n  maxIterations = 10,\r\n  sequential = false,\r\n  revealDirection = \"start\",\r\n  useOriginalCharsOnly = false,\r\n  characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!@#$%^&*()_+\",\r\n  className = \"\",\r\n  parentClassName = \"\",\r\n  encryptedClassName = \"\",\r\n  animateOn = \"hover\",\r\n  forceOnMount = false,\r\n  ...props\r\n}) {\r\n  const [displayText, setDisplayText] = useState(text);\r\n  const [isHovering, setIsHovering] = useState(false);\r\n  const [isScrambling, setIsScrambling] = useState(false);\r\n  const [revealedIndices, setRevealedIndices] = useState(new Set());\r\n  const [hasAnimated, setHasAnimated] = useState(false);\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    let currentIteration = 0;\r\n\r\n    // Si forceOnMount está activo, forzar animación al montar\r\n    if (forceOnMount && !hasAnimated) {\r\n      setIsHovering(true);\r\n      setHasAnimated(true);\r\n    }\r\n\r\n    const getNextIndex = (revealedSet) => {\r\n      const textLength = text.length;\r\n      switch (revealDirection) {\r\n        case \"start\":\r\n          return revealedSet.size;\r\n        case \"end\":\r\n          return textLength - 1 - revealedSet.size;\r\n        case \"center\": {\r\n          const middle = Math.floor(textLength / 2);\r\n          const offset = Math.floor(revealedSet.size / 2);\r\n          const nextIndex = revealedSet.size % 2 === 0 ? middle + offset : middle - offset - 1;\r\n\r\n          if (nextIndex >= 0 && nextIndex < textLength && !revealedSet.has(nextIndex)) {\r\n            return nextIndex;\r\n          }\r\n\r\n          for (let i = 0; i < textLength; i++) {\r\n            if (!revealedSet.has(i)) return i;\r\n          }\r\n          return 0;\r\n        }\r\n        default:\r\n          return revealedSet.size;\r\n      }\r\n    };\r\n\r\n    const availableChars = useOriginalCharsOnly\r\n      ? Array.from(new Set(text.split(\"\"))).filter((char) => char !== \" \")\r\n      : characters.split(\"\");\r\n\r\n    const shuffleText = (originalText, currentRevealed) => {\r\n      if (useOriginalCharsOnly) {\r\n        const positions = originalText.split(\"\").map((char, i) => ({\r\n          char,\r\n          isSpace: char === \" \",\r\n          index: i,\r\n          isRevealed: currentRevealed.has(i),\r\n        }));\r\n\r\n        const nonSpaceChars = positions.filter((p) => !p.isSpace && !p.isRevealed).map((p) => p.char);\r\n\r\n        for (let i = nonSpaceChars.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          [nonSpaceChars[i], nonSpaceChars[j]] = [nonSpaceChars[j], nonSpaceChars[i]];\r\n        }\r\n\r\n        let charIndex = 0;\r\n        return positions\r\n          .map((p) => {\r\n            if (p.isSpace) return \" \";\r\n            if (p.isRevealed) return originalText[p.index];\r\n            return nonSpaceChars[charIndex++];\r\n          })\r\n          .join(\"\");\r\n      } else {\r\n        return originalText\r\n          .split(\"\")\r\n          .map((char, i) => {\r\n            if (char === \" \") return \" \";\r\n            if (currentRevealed.has(i)) return originalText[i];\r\n            return availableChars[Math.floor(Math.random() * availableChars.length)];\r\n          })\r\n          .join(\"\");\r\n      }\r\n    };\r\n\r\n    if (isHovering) {\r\n      setIsScrambling(true);\r\n      interval = setInterval(() => {\r\n        setRevealedIndices((prevRevealed) => {\r\n          if (sequential) {\r\n            if (prevRevealed.size < text.length) {\r\n              const nextIndex = getNextIndex(prevRevealed);\r\n              const newRevealed = new Set(prevRevealed);\r\n              newRevealed.add(nextIndex);\r\n              setDisplayText(shuffleText(text, newRevealed));\r\n              return newRevealed;\r\n            } else {\r\n              clearInterval(interval);\r\n              setIsScrambling(false);\r\n              return prevRevealed;\r\n            }\r\n          } else {\r\n            setDisplayText(shuffleText(text, prevRevealed));\r\n            currentIteration++;\r\n            if (currentIteration >= maxIterations) {\r\n              clearInterval(interval);\r\n              setIsScrambling(false);\r\n              setDisplayText(text);\r\n            }\r\n            return prevRevealed;\r\n          }\r\n        });\r\n      }, speed);\r\n    } else {\r\n      setDisplayText(text);\r\n      setRevealedIndices(new Set());\r\n      setIsScrambling(false);\r\n    }\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  }, [isHovering, text, speed, maxIterations, sequential, revealDirection, characters, useOriginalCharsOnly]);\r\n\r\n  useEffect(() => {\r\n    if (animateOn !== \"view\" && animateOn !== \"both\") return;\r\n\r\n    const observerCallback = (entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting && !hasAnimated) {\r\n          setIsHovering(true);\r\n          setHasAnimated(true);\r\n        }\r\n      });\r\n    };\r\n\r\n    const observerOptions = {\r\n      root: null,\r\n      rootMargin: \"0px\",\r\n      threshold: 0.1,\r\n    };\r\n\r\n    const observer = new IntersectionObserver(observerCallback, observerOptions);\r\n    const currentRef = containerRef.current;\r\n    if (currentRef) {\r\n      observer.observe(currentRef);\r\n    }\r\n\r\n    return () => {\r\n      if (currentRef) {\r\n        observer.unobserve(currentRef);\r\n      }\r\n    };\r\n  }, [animateOn, hasAnimated]);\r\n\r\n  const hoverProps =\r\n    animateOn === \"hover\" || animateOn === \"both\"\r\n      ? {\r\n          onMouseEnter: () => setIsHovering(true),\r\n          onMouseLeave: () => setIsHovering(false),\r\n        }\r\n      : {};\r\n\r\n  return (\r\n    <motion.span className={parentClassName} ref={containerRef} style={styles.wrapper} {...hoverProps} {...props}>\r\n      <span style={styles.srOnly}>{displayText}</span>\r\n\r\n      <span aria-hidden=\"true\">\r\n        {displayText.split(\"\").map((char, index) => {\r\n          const isRevealedOrDone = revealedIndices.has(index) || !isScrambling || !isHovering;\r\n\r\n          return (\r\n            <span key={index} className={isRevealedOrDone ? className : encryptedClassName}>\r\n              {char}\r\n            </span>\r\n          );\r\n        })}\r\n      </span>\r\n    </motion.span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Full = styled.section`\r\n  width: 100%;\r\n  display: block;\r\n  height: 100dvh;\r\n`;\r\n\r\ninterface FullViewportProps {\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst FullViewport = ({ children, className }: FullViewportProps) => (\r\n  <Full className={className} data-full-viewport=\"true\">\r\n    {children}\r\n  </Full>\r\n);\r\n\r\nexport default FullViewport;\r\n","import styled from \"styled-components\";\r\nimport FullViewport from \"./FullViewport\";\r\n\r\nconst FullViewportSection = styled(FullViewport)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default FullViewportSection;\r\n","import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport DecryptedText from \"../TexComponents/DecryptedText\";\r\nimport SplitText from \"../TexComponents/SplitText/SplitText\";\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n  IconWithHalo,\r\n  SectionIconWrap,\r\n} from \"./styles\";\r\nimport FullViewportSection from \"../FullViewport/FullViewportSection\";\r\n\r\nconst ContentBlock = ({\r\n  icon,\r\n  title,\r\n  content,\r\n  section,\r\n  button,\r\n  id,\r\n  direction,\r\n  customContent,\r\n  animation,\r\n}: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n  const isCenter = direction === \"center\";\r\n  // For center sections we wrap the ContentSection inside FullViewportSection (structural)\r\n  if (direction === \"center\") {\r\n    return (\r\n      <FullViewportSection>\r\n        <ContentSection>\r\n          <Fade direction=\"up\" triggerOnce>\r\n            <StyledRow justify=\"center\" align=\"middle\" id={id} direction={direction}>\r\n              {/* Single column with icon + content together */}\r\n              <Col\r\n                span={24}\r\n                style={{\r\n                  flex: \"1\",\r\n                  minHeight: 0,\r\n                  overflow: \"visible\",\r\n                }}>\r\n                <ContentWrapper $centered={true}>\r\n                  <div className=\"content-block-icon\">\r\n                    <SectionIconWrap>\r\n                      {typeof icon === \"string\" ? (\r\n                        icon.endsWith(\".png\") || icon.endsWith(\".jpg\") || icon.endsWith(\".jpeg\") ? (\r\n                          <IconWithHalo>\r\n                            <img\r\n                              src={`${process.env.PUBLIC_URL}/img/png/${icon}`}\r\n                              alt=\"\"\r\n                              className=\"responsive-icon-img\"\r\n                            />\r\n                          </IconWithHalo>\r\n                        ) : (\r\n                          <SvgIcon src={icon} width=\"min(200px, 25vh)\" height=\"min(200px, 25vh)\" />\r\n                        )\r\n                      ) : (\r\n                        icon\r\n                      )}\r\n                    </SectionIconWrap>\r\n                  </div>\r\n\r\n                  {title && (\r\n                    <h6>\r\n                      <DecryptedText\r\n                        text={title}\r\n                        animateOn=\"view\"\r\n                        revealDirection=\"center\"\r\n                        speed={25}\r\n                        maxIterations={30}\r\n                        forceOnMount={true}\r\n                      />\r\n                    </h6>\r\n                  )}\r\n                  {content && (\r\n                    <Content>\r\n                      <span>{content}</span>\r\n                    </Content>\r\n                  )}\r\n                  {customContent}\r\n                  <ButtonWrapper $centered={true}>\r\n                    {typeof button === \"object\" &&\r\n                      button.map((item: any, id: number) => (\r\n                        <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                          {item.title}\r\n                        </Button>\r\n                      ))}\r\n                  </ButtonWrapper>\r\n                </ContentWrapper>\r\n              </Col>\r\n            </StyledRow>\r\n          </Fade>\r\n        </ContentSection>\r\n      </FullViewportSection>\r\n    );\r\n  }\r\n  // Non-center directions keep the original layout\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={isCenter ? \"up\" : direction} triggerOnce>\r\n        <StyledRow justify={isCenter ? \"center\" : \"space-between\"} align=\"middle\" id={id} direction={direction}>\r\n          {/* ...existing non-center layout... */}\r\n          <>\r\n            <Col span={11} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              {typeof icon === \"string\" ? (\r\n                icon.endsWith(\".png\") || icon.endsWith(\".jpg\") || icon.endsWith(\".jpeg\") ? (\r\n                  <img\r\n                    src={`${process.env.PUBLIC_URL}/img/png/${icon}`}\r\n                    alt=\"\"\r\n                    style={{\r\n                      width: \"min(100%, 40vh)\",\r\n                      height: \"min(100%, 40vh)\",\r\n                      objectFit: \"contain\",\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <SvgIcon src={icon} width=\"min(100%, 40vh)\" height=\"min(100%, 40vh)\" />\r\n                )\r\n              ) : (\r\n                icon\r\n              )}\r\n            </Col>\r\n            <Col span={11} style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <ContentWrapper style={{ flex: \"1\", display: \"flex\", flexDirection: \"column\" }}>\r\n                <h6>\r\n                  <DecryptedText\r\n                    text={title}\r\n                    animateOn=\"view\"\r\n                    revealDirection=\"center\"\r\n                    speed={45}\r\n                    maxIterations={30}\r\n                    forceOnMount={true}\r\n                  />\r\n                </h6>\r\n                <Content>\r\n                  <span>{content}</span>\r\n                </Content>\r\n                {customContent}\r\n                {direction === \"right\" ? (\r\n                  <ButtonWrapper>\r\n                    {typeof button === \"object\" &&\r\n                      button.map((item: any, id: number) => (\r\n                        <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                          {item.title}\r\n                        </Button>\r\n                      ))}\r\n                  </ButtonWrapper>\r\n                ) : (\r\n                  // Eliminar ServiceWrapper, dejar que el grid maneje el layout\r\n                  <>\r\n                    {typeof section === \"object\" &&\r\n                      section\r\n                        .reduce((rows: any[], item: any, idx: number) => {\r\n                          if (idx % 2 === 0) rows.push([item]);\r\n                          else rows[rows.length - 1].push(item);\r\n                          return rows;\r\n                        }, [])\r\n                        .map((row: any[], rowIdx: number) => (\r\n                          <Row\r\n                            justify=\"center\"\r\n                            key={rowIdx}\r\n                            style={{\r\n                              width: \"100%\",\r\n                              marginBottom: \"2em\",\r\n                              display: \"flex\",\r\n                              flexDirection: \"row\",\r\n                              flexWrap: \"nowrap\",\r\n                              gap: \"2em\",\r\n                            }}>\r\n                            {row.map((item: any, colIdx: number) => (\r\n                              <Col\r\n                                key={colIdx}\r\n                                span={row.length === 2 ? 12 : 24}\r\n                                style={{\r\n                                  display: \"flex\",\r\n                                  flexDirection: \"column\",\r\n                                  alignItems: \"center\",\r\n                                  minWidth: 0,\r\n                                  flex: 1,\r\n                                }}>\r\n                                <SvgIcon src={item.icon} width=\"60px\" height=\"60px\" />\r\n                                <MinTitle>{item.title}</MinTitle>\r\n                                <MinPara>{item.content}</MinPara>\r\n                              </Col>\r\n                            ))}\r\n                          </Row>\r\n                        ))}\r\n                  </>\r\n                )}\r\n              </ContentWrapper>\r\n            </Col>\r\n          </>\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default ContentBlock;\r\n"],"names":["styles","wrapper","display","whiteSpace","srOnly","position","width","height","padding","margin","overflow","clip","border","DecryptedText","_ref","text","speed","maxIterations","sequential","revealDirection","useOriginalCharsOnly","characters","className","parentClassName","encryptedClassName","animateOn","forceOnMount","props","_objectWithoutProperties","_excluded","displayText","setDisplayText","useState","isHovering","setIsHovering","isScrambling","setIsScrambling","revealedIndices","setRevealedIndices","Set","hasAnimated","setHasAnimated","containerRef","useRef","useEffect","interval","currentIteration","availableChars","Array","from","split","filter","char","shuffleText","originalText","currentRevealed","positions","map","i","isSpace","index","isRevealed","has","nonSpaceChars","p","length","j","Math","floor","random","charIndex","join","setInterval","prevRevealed","size","nextIndex","revealedSet","textLength","middle","offset","getNextIndex","newRevealed","add","clearInterval","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","root","rootMargin","threshold","currentRef","current","observe","unobserve","hoverProps","onMouseEnter","onMouseLeave","_jsxs","motion","span","_objectSpread","ref","style","children","_jsx","isRevealedOrDone","Full","styled","section","_templateObject","_taggedTemplateLiteral","FullViewport","icon","title","content","button","id","direction","customContent","animation","scrollTo","document","getElementById","scrollIntoView","behavior","isCenter","FullViewportSection","ContentSection","Fade","triggerOnce","StyledRow","justify","align","Col","flex","minHeight","ContentWrapper","$centered","SectionIconWrap","endsWith","IconWithHalo","src","concat","process","alt","SvgIcon","Content","ButtonWrapper","item","Button","color","onClick","_Fragment","alignItems","objectFit","flexDirection","reduce","rows","idx","push","row","rowIdx","Row","marginBottom","flexWrap","gap","colIdx","minWidth","MinTitle","MinPara"],"sourceRoot":""}