{"version":3,"file":"static/js/147.c110df54.chunk.js","mappings":"2LASA,MAAMA,EAAyB,CAC7BC,KAAM,GACNC,MAAO,GACPC,QAAS,ICVI,SAASC,EAASC,GAC/B,IAAIC,EAAS,CAAC,EAad,OAXKD,EAAOJ,OACVK,EAAOL,KAAO,oBAEXI,EAAOH,MAEA,eAAeK,KAAKF,EAAOH,SACrCI,EAAOJ,MAAQ,4BAFfI,EAAOJ,MAAQ,4BAIZG,EAAOF,UACVG,EAAOH,QAAU,uBAEZG,CACT,C,mCCfO,MAAME,GAAYC,EAAAA,EAAAA,IAAO,MAAPA,CAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6GAMzBC,GAAcH,EAAAA,EAAAA,IAAO,QAAPA,CAAeI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,8D,UCNnC,MAAMG,GAAkBL,EAAAA,EAAAA,IAAO,MAAPA,CAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6KAO/BI,GAAiBN,EAAAA,EAAAA,IAAO,WAAPA,CAAkBI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,goBAoBnCK,GAAQP,EAAAA,EAAAA,IAAO,QAAPA,CAAeQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,mH,aCzBpC,MAOA,EAPcO,IAAA,IAAC,KAAEjB,EAAI,YAAEkB,EAAW,SAAEC,GAAsBF,EAAA,OACxDG,EAAAA,EAAAA,MAACb,EAAS,CAAAc,SAAA,EACRC,EAAAA,EAAAA,KAACP,EAAK,CAACQ,QAASvB,EAAKqB,SAAErB,KACvBsB,EAAAA,EAAAA,KAACX,EAAW,CAACO,YAAaA,EAAalB,KAAMA,EAAMwB,GAAIxB,EAAMmB,SAAUA,MAC7D,ECGd,EAPiBF,IAAA,IAAC,KAAEjB,EAAI,YAAEkB,EAAW,SAAEC,GAAsBF,EAAA,OAC3DG,EAAAA,EAAAA,MAACP,EAAe,CAAAQ,SAAA,EACdC,EAAAA,EAAAA,KAACP,EAAK,CAACQ,QAASvB,EAAKqB,SAAErB,KACvBsB,EAAAA,EAAAA,KAACR,EAAc,CAACI,YAAaA,EAAaM,GAAIxB,EAAMA,KAAMA,EAAMmB,SAAUA,MAC1D,E,oBCJb,MAAMM,GAAYjB,EAAAA,EAAAA,IAAO,OAAPA,CAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,k7IAmGoC,GAEnE,IA8DKgB,GAAOlB,EAAAA,EAAAA,IAAO,OAAPA,CAAcI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,gJASrBiB,GAAkBnB,EAAAA,EAAAA,IAAO,MAAPA,CAAaQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,gRChI5C,EAtCgBO,IAA2C,IAA1C,MAAEW,EAAK,QAAEC,EAAO,GAAEL,GAAkBP,EACnD,MAAM,OAAEb,EAAM,OAAEC,EAAM,aAAEyB,EAAY,aAAEC,GPIhB5B,KACtB,MAAO6B,EAAWC,IAAgBC,EAAAA,EAAAA,UAG/B,CACD9B,QAAM+B,EAAAA,EAAAA,GAAA,GAAOpC,GACbM,QAAM8B,EAAAA,EAAAA,GAAA,GAAOpC,KAkEf,MAAO,CACL+B,aAlBAM,IAEAA,EAAMC,UACN,MAAM,KAAErC,EAAI,MAAEsC,GAAUF,EAAMG,OAC9BN,GAAcO,IAASL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClBK,GAAS,IACZpC,QAAM+B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDK,EAAUpC,QAAM,IACnB,CAACJ,GAAOsC,IAEVjC,QAAM8B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDK,EAAUnC,QAAM,IACnB,CAACL,GAAO,QAET,EAKH+B,aAjEmBU,UACnBL,EAAMM,iBACN,MAAMtC,EAAS4B,EAAU5B,OACnBC,EAASF,EAASC,GACxB6B,GAAcO,IAASL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWK,GAAS,IAAEnC,aAI7C,IACMsC,OAAOvC,OAAOC,GAAQuC,OAAOC,GAAoB,KAAVA,aAClBC,MAJf,GAI0B,CAChCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU/C,MAGTgD,IAOZhB,EAAMG,OAAOc,QACbpB,GAAa,MACX7B,QAAM+B,EAAAA,EAAAA,GAAA,GAAOpC,GACbM,QAAM8B,EAAAA,EAAAA,GAAA,GAAOpC,OAGfuD,EAAAA,EAAsB,QAAE,CACtBpD,QAAS,UACTqD,YAAa,iCAdfD,EAAAA,EAAoB,MAAE,CACpBpD,QAAS,QACTqD,YACE,qEAeV,CAAE,MAAOV,GACPS,EAAAA,EAAoB,MAAE,CACpBpD,QAAS,QACTqD,YAAa,kDAEjB,GAwBAnD,OAAQ4B,EAAU5B,OAClBC,OAAQ2B,EAAU3B,OACnB,EOjFsDmD,CAAQrD,GAEzDsD,EAAiBC,IAAoC,IAAnC,KAAEC,GAA2BD,EACnD,MAAME,EAAevD,EAAOsD,GAC5B,OAAOrC,EAAAA,EAAAA,KAACI,EAAI,CAAAL,SAAEuC,GAAoB,EAI9BC,GACJzC,EAAAA,EAAAA,MAACK,EAAS,CAACqC,aAAa,MAAMC,SAAUhC,EAAaV,SAAA,EACnDD,EAAAA,EAAAA,MAAC4C,EAAAA,EAAG,CAACC,KAAM,GAAG5C,SAAA,EACZC,EAAAA,EAAAA,KAAC4C,EAAK,CAACP,KAAK,OAAO3D,KAAK,SAASkB,YAAY,YAAYoB,MAAOlC,EAAOJ,MAAQ,GAAImB,SAAUW,KAC7FR,EAAAA,EAAAA,KAACmC,EAAc,CAACE,KAAK,aAEvBvC,EAAAA,EAAAA,MAAC4C,EAAAA,EAAG,CAACC,KAAM,GAAG5C,SAAA,EACZC,EAAAA,EAAAA,KAAC4C,EAAK,CACJP,KAAK,OACL3D,KAAK,QACLkB,YAAY,2BACZoB,MAAOlC,EAAOH,OAAS,GACvBkB,SAAUW,KAEZR,EAAAA,EAAAA,KAACmC,EAAc,CAACE,KAAK,cAEvBvC,EAAAA,EAAAA,MAAC4C,EAAAA,EAAG,CAACC,KAAM,GAAG5C,SAAA,EACZC,EAAAA,EAAAA,KAAC6C,EAAQ,CAACjD,YAAY,aAAaoB,MAAOlC,EAAOF,SAAW,GAAIF,KAAK,UAAUmB,SAAUW,KACzFR,EAAAA,EAAAA,KAACmC,EAAc,CAACE,KAAK,gBAEvBrC,EAAAA,EAAAA,KAACK,EAAe,CAAAN,UACdC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CAACpE,KAAK,SAAQqB,SAAC,gBAK5B,OAAOC,EAAAA,EAAAA,KAAC+C,EAAAA,QAAY,CAACC,UAAU,SAAS1C,MAAOA,EAAOC,QAASA,EAASL,GAAIA,EAAI+C,cAAeV,GAAsB,C,+TC1CjHW,EAAS,CACbC,QAAS,CACPC,QAAS,eACTC,WAAY,YAEdC,OAAQ,CACNC,SAAU,WACVC,MAAO,MACPC,OAAQ,MACRC,QAAS,EACTC,OAAQ,OACRC,SAAU,SACVC,KAAM,gBACNC,OAAQ,IAIG,SAASC,EAAapE,GAajC,IAbkC,KACpCqE,EAAI,MACJC,EAAQ,GAAE,cACVC,EAAgB,GAAE,WAClBC,GAAa,EAAK,gBAClBC,EAAkB,QAAO,qBACzBC,GAAuB,EAAK,WAC5BC,EAAa,mEAAkE,UAC/EC,EAAY,GAAE,gBACdC,EAAkB,GAAE,mBACpBC,EAAqB,GAAE,UACvBC,EAAY,SAEb/E,EADIgF,GAAKC,EAAAA,EAAAA,GAAAjF,EAAAkF,GAER,MAAOC,EAAaC,IAAkBnE,EAAAA,EAAAA,UAASoD,IACxCgB,EAAYC,IAAiBrE,EAAAA,EAAAA,WAAS,IACtCsE,EAAcC,IAAmBvE,EAAAA,EAAAA,WAAS,IAC1CwE,EAAiBC,IAAsBzE,EAAAA,EAAAA,UAAS,IAAI0E,MACpDC,EAAaC,IAAkB5E,EAAAA,EAAAA,WAAS,GACzC6E,GAAeC,EAAAA,EAAAA,QAAO,OAE5BC,EAAAA,EAAAA,YAAU,KACR,IAAIC,EACAC,EAAmB,EAEvB,MA0BMC,EAAiBzB,EACnB0B,MAAMC,KAAK,IAAIV,IAAItB,EAAKiC,MAAM,MAAMC,QAAQC,GAAkB,MAATA,IACrD7B,EAAW2B,MAAM,IAEfG,EAAcA,CAACC,EAAcC,KACjC,GAAIjC,EAAsB,CACxB,MAAMkC,EAAYF,EAAaJ,MAAM,IAAIO,KAAI,CAACL,EAAMM,KAAC,CACnDN,OACAO,QAAkB,MAATP,EACTQ,MAAOF,EACPG,WAAYN,EAAgBO,IAAIJ,OAG5BK,EAAgBP,EAAUL,QAAQa,IAAOA,EAAEL,UAAYK,EAAEH,aAAYJ,KAAKO,GAAMA,EAAEZ,OAExF,IAAK,IAAIM,EAAIK,EAAcE,OAAS,EAAGP,EAAI,EAAGA,IAAK,CACjD,MAAMQ,EAAIC,KAAKC,MAAMD,KAAKE,UAAYX,EAAI,KACzCK,EAAcL,GAAIK,EAAcG,IAAM,CAACH,EAAcG,GAAIH,EAAcL,GAC1E,CAEA,IAAIY,EAAY,EAChB,OAAOd,EACJC,KAAKO,GACAA,EAAEL,QAAgB,IAClBK,EAAEH,WAAmBP,EAAaU,EAAEJ,OACjCG,EAAcO,OAEtBC,KAAK,GACV,CACE,OAAOjB,EACJJ,MAAM,IACNO,KAAI,CAACL,EAAMM,IACG,MAATN,EAAqB,IACrBG,EAAgBO,IAAIJ,GAAWJ,EAAaI,GACzCX,EAAeoB,KAAKC,MAAMD,KAAKE,SAAWtB,EAAekB,WAEjEM,KAAK,GACV,EAqCF,OAlCItC,GACFG,GAAgB,GAChBS,EAAW2B,aAAY,KACrBlC,GAAoBmC,IAClB,GAAIrD,EAAY,CACd,GAAIqD,EAAaC,KAAOzD,EAAKgD,OAAQ,CACnC,MAAMU,EAxEMC,KACpB,MAAMC,EAAa5D,EAAKgD,OACxB,OAAQ5C,GACN,IAAK,QAkBL,QACE,OAAOuD,EAAYF,KAjBrB,IAAK,MACH,OAAOG,EAAa,EAAID,EAAYF,KACtC,IAAK,SAAU,CACb,MAAMI,EAASX,KAAKC,MAAMS,EAAa,GACjCE,EAASZ,KAAKC,MAAMQ,EAAYF,KAAO,GACvCC,EAAYC,EAAYF,KAAO,IAAM,EAAII,EAASC,EAASD,EAASC,EAAS,EAEnF,GAAIJ,GAAa,GAAKA,EAAYE,IAAeD,EAAYd,IAAIa,GAC/D,OAAOA,EAGT,IAAK,IAAIjB,EAAI,EAAGA,EAAImB,EAAYnB,IAC9B,IAAKkB,EAAYd,IAAIJ,GAAI,OAAOA,EAElC,OAAO,CACT,EAGF,EAiD0BsB,CAAaP,GACzBQ,EAAc,IAAI1C,IAAIkC,GAG5B,OAFAQ,EAAYC,IAAIP,GAChB3C,EAAeqB,EAAYpC,EAAMgE,IAC1BA,CACT,CAGE,OAFAE,cAActC,GACdT,GAAgB,GACTqC,CAEX,CAQE,OAPAzC,EAAeqB,EAAYpC,EAAMwD,IACjC3B,IACIA,GAAoB3B,IACtBgE,cAActC,GACdT,GAAgB,GAChBJ,EAAef,IAEVwD,CACT,GACA,GACDvD,KAEHc,EAAef,GACfqB,EAAmB,IAAIC,KACvBH,GAAgB,IAGX,KACDS,GAAUsC,cAActC,EAAS,CACtC,GACA,CAACZ,EAAYhB,EAAMC,EAAOC,EAAeC,EAAYC,EAAiBE,EAAYD,KAErFsB,EAAAA,EAAAA,YAAU,KACR,GAAkB,SAAdjB,GAAsC,SAAdA,EAAsB,OAElD,MAeMyD,EAAW,IAAIC,sBAfKC,IACxBA,EAAQC,SAASC,IACXA,EAAMC,iBAAmBjD,IAC3BN,GAAc,GACdO,GAAe,GACjB,GACA,GAGoB,CACtBiD,KAAM,KACNC,WAAY,MACZC,UAAW,KAIPC,EAAanD,EAAaoD,QAKhC,OAJID,GACFT,EAASW,QAAQF,GAGZ,KACDA,GACFT,EAASY,UAAUH,EACrB,CACD,GACA,CAAClE,EAAWa,IAEf,MAAMyD,EACU,UAAdtE,GAAuC,SAAdA,EACrB,CACEuE,aAAcA,IAAMhE,GAAc,GAClCiE,aAAcA,IAAMjE,GAAc,IAEpC,CAAC,EAEP,OACEnF,EAAAA,EAAAA,MAACqJ,EAAAA,EAAOxG,MAAI9B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAC0D,UAAWC,EAAiB4E,IAAK3D,EAAc4D,MAAOnG,EAAOC,SAAa6F,GAAgBrE,GAAK,IAAA5E,SAAA,EAC1GC,EAAAA,EAAAA,KAAA,QAAMqJ,MAAOnG,EAAOI,OAAOvD,SAAE+E,KAE7B9E,EAAAA,EAAAA,KAAA,QAAM,cAAY,OAAMD,SACrB+E,EAAYmB,MAAM,IAAIO,KAAI,CAACL,EAAMQ,KAChC,MAAM2C,EAAmBlE,EAAgByB,IAAIF,KAAWzB,IAAiBF,EAEzE,OACEhF,EAAAA,EAAAA,KAAA,QAAkBuE,UAAW+E,EAAmB/E,EAAYE,EAAmB1E,SAC5EoG,GADQQ,EAEJ,SAMnB,C,2CC1MA,MAAM4C,GAAOrK,EAAAA,EAAAA,IAAOsK,EAAAA,GAAPtK,CAAgBC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6CA4B7B,EAlBqBO,IAAiD,IAAhD,SAAEI,EAAQ,UAAEwE,GAA8B5E,EAW9D,OAVA8J,EAAAA,WAAgB,KACd,MAAMC,EAAQA,KACZ,MAAMC,EAA0B,IAArBC,OAAOC,YAClBC,SAASC,gBAAgBV,MAAMW,YAAY,OAAO,GAADC,OAAKN,EAAE,MAAK,EAI/D,OAFAD,IACAE,OAAOM,iBAAiB,SAAUR,GAC3B,IAAME,OAAOO,oBAAoB,SAAUT,EAAM,GACvD,KAGD1J,EAAAA,EAAAA,KAACuJ,EAAI,CAAChF,UAAWA,EAAW,qBAAmB,OAAMxE,SAClDA,GACI,E,MCzBX,MAMA,GAN4Bb,EAAAA,EAAAA,IAAOkL,EAAPlL,CAAoBC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gFCoKhD,EAjJqBO,IAUK,IAVJ,KACpB0K,EAAI,MACJ/J,EAAK,QACLC,EAAO,QACP+J,EAAO,OACPC,EAAM,GACNrK,EAAE,UACF8C,EAAS,cACTC,EAAa,UACbuH,GACkB7K,EAClB,MAAM8K,EAAYvK,IACA4J,SAASY,eAAexK,GAChCyK,eAAe,CACrBC,SAAU,UACV,EAEEC,EAAyB,WAAd7H,EAEjB,MAAkB,WAAdA,GAEAhD,EAAAA,EAAAA,KAAC8K,EAAmB,CAAA/K,UAClBC,EAAAA,EAAAA,KAAC+K,EAAAA,GAAc,CAAAhL,UACbC,EAAAA,EAAAA,KAACgL,EAAAA,GAAI,CAAChI,UAAU,KAAKiI,aAAW,EAAAlL,UAC9BC,EAAAA,EAAAA,KAACkL,EAAAA,GAAS,CAACC,QAAQ,SAASC,MAAM,SAASlL,GAAIA,EAAI8C,UAAWA,EAAUjD,UAEtEC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAG,CACFC,KAAM,GACN0G,MAAO,CACLgC,KAAM,IACNC,UAAW,EACX1H,SAAU,WACV7D,UACFD,EAAAA,EAAAA,MAACyL,EAAAA,GAAc,CAACC,WAAW,EAAKzL,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKuE,UAAU,qBAAoBxE,UACjCC,EAAAA,EAAAA,KAACyL,EAAAA,GAAe,CAAA1L,SACG,kBAATsK,EACNA,EAAKqB,SAAS,SAAWrB,EAAKqB,SAAS,SAAWrB,EAAKqB,SAAS,UAC9D1L,EAAAA,EAAAA,KAAC2L,EAAAA,GAAY,CAAA5L,UACXC,EAAAA,EAAAA,KAAA,OACE4L,IAAG,GAAA3B,OAAK4B,mBAAsB,aAAA5B,OAAYI,GAC1CyB,IAAI,GACJvH,UAAU,2BAIdvE,EAAAA,EAAAA,KAAC+L,EAAAA,EAAO,CAACH,IAAKvB,EAAM7G,MAAM,mBAAmBC,OAAO,qBAGtD4G,MAKL/J,IAASN,EAAAA,EAAAA,KAAA,MAAAD,SAAKO,IACdC,IACCP,EAAAA,EAAAA,KAACgM,EAAAA,GAAO,CAAAjM,UACNC,EAAAA,EAAAA,KAAA,QAAAD,SAAOQ,MAGV0C,GACDjD,EAAAA,EAAAA,KAACiM,EAAAA,GAAa,CAACT,WAAW,EAAKzL,SACV,kBAAXwK,GACNA,EAAO/D,KAAI,CAAC0F,EAAWhM,KACrBF,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CAAUqJ,MAAOD,EAAKC,MAAOC,QAASA,IAAM3B,EAAS,SAAS1K,SAClEmM,EAAK5L,OADKJ,qBAgBjCF,EAAAA,EAAAA,KAAC+K,EAAAA,GAAc,CAAAhL,UACbC,EAAAA,EAAAA,KAACgL,EAAAA,GAAI,CAAChI,UAAW6H,EAAW,KAAO7H,EAAWiI,aAAW,EAAAlL,UACvDC,EAAAA,EAAAA,KAACkL,EAAAA,GAAS,CAACC,QAASN,EAAW,SAAW,gBAAiBO,MAAM,SAASlL,GAAIA,EAAI8C,UAAWA,EAAUjD,UAErGD,EAAAA,EAAAA,MAAAuM,EAAAA,SAAA,CAAAtM,SAAA,EACEC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAG,CAAC4J,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIpD,MAAO,CAAEjG,QAAS,OAAQsJ,WAAY,UAAW3M,SACnE,kBAATsK,EACNA,EAAKqB,SAAS,SAAWrB,EAAKqB,SAAS,SAAWrB,EAAKqB,SAAS,UAC9D1L,EAAAA,EAAAA,KAAA,OACE4L,IAAG,GAAA3B,OAAK4B,mBAAsB,aAAA5B,OAAYI,GAC1CyB,IAAI,GACJzC,MAAO,CACL7F,MAAO,kBACPC,OAAQ,kBACRkJ,UAAW,cAIf3M,EAAAA,EAAAA,KAAC+L,EAAAA,EAAO,CAACH,IAAKvB,EAAM7G,MAAM,kBAAkBC,OAAO,oBAGrD4G,KAGJrK,EAAAA,EAAAA,KAAC0C,EAAAA,EAAG,CAAC4J,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIpD,MAAO,CAAEjG,QAAS,OAAQwJ,cAAe,UAAW7M,UACvFD,EAAAA,EAAAA,MAACyL,EAAAA,GAAc,CAAClC,MAAO,CAAEgC,KAAM,IAAKjI,QAAS,OAAQwJ,cAAe,UAAW7M,SAAA,EAC7EC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAC+D,EAAa,CAACC,KAAM1D,EAAOoE,UAAU,OAAON,gBAAgB,SAASH,MAAO,GAAIC,cAAe,QAElGlE,EAAAA,EAAAA,KAACgM,EAAAA,GAAO,CAAAjM,UACNC,EAAAA,EAAAA,KAAA,QAAAD,SAAOQ,MAER0C,EACc,UAAdD,GACChD,EAAAA,EAAAA,KAACiM,EAAAA,GAAa,CAAAlM,SACO,kBAAXwK,GACNA,EAAO/D,KAAI,CAAC0F,EAAWhM,KACrBF,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CAAUqJ,MAAOD,EAAKC,MAAOC,QAASA,IAAM3B,EAAS,SAAS1K,SAClEmM,EAAK5L,OADKJ,QAMnBF,EAAAA,EAAAA,KAAC6M,EAAAA,GAAc,CAAA9M,UACbC,EAAAA,EAAAA,KAAC8M,EAAAA,EAAG,CAAC3B,QAAQ,gBAAepL,SACN,kBAAZuK,GACNA,EAAQ9D,KAAI,CAAC0F,EAAWhM,KACtBJ,EAAAA,EAAAA,MAAC4C,EAAAA,EAAG,CAAUC,KAAM,GAAG5C,SAAA,EACrBC,EAAAA,EAAAA,KAAC+L,EAAAA,EAAO,CAACH,IAAKM,EAAK7B,KAAM7G,MAAM,OAAOC,OAAO,UAC7CzD,EAAAA,EAAAA,KAAC+M,EAAAA,GAAQ,CAAAhN,SAAEmM,EAAK5L,SAChBN,EAAAA,EAAAA,KAACgN,EAAAA,GAAO,CAAAjN,SAAEmM,EAAK3L,YAHPL,sBAcf,C","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx","components/TexComponents/DecryptedText.js","components/FullViewport/FullViewport.tsx","components/FullViewport/FullViewportSection.tsx","components/ContentBlock/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    const url = \"\"; // Fill in your API URL here\r\n\r\n    try {\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        const response = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          notification[\"error\"]({\r\n            message: \"Error\",\r\n            description:\r\n              \"There was an error sending your message, please try again later.\",\r\n          });\r\n        } else {\r\n          event.target.reset();\r\n          setFormState(() => ({\r\n            values: { ...initialValues },\r\n            errors: { ...initialValues },\r\n          }));\r\n\r\n          notification[\"success\"]({\r\n            message: \"Success\",\r\n            description: \"Your message has been sent!\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit form. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 0.625em 0.3125em; /* Proportional padding */\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875em; /* Proportional font size */\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 0.5em 0.25em; /* Proportional padding */\r\n  margin-bottom: 0.25em; /* Keep a small gap below the textarea */\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: vertical;\r\n  font-size: 0.98rem; /* Slightly larger for readability */\r\n  height: auto;\r\n  min-height: 5.5rem; /* Ensure at least ~2 visible rows comfortably */\r\n  max-height: 28vh; /* Prevent the textarea from growing too tall */\r\n\r\n  /* For short viewports, keep the textarea at a reasonable minimum but\r\n     reduce spacing elsewhere (handled in FormGroup) so textarea stays usable. */\r\n  @media only screen and (max-height: 950px) {\r\n    min-height: 4.2rem; /* still approx two rows */\r\n    max-height: 22vh;\r\n  }\r\n\r\n  @media only screen and (max-height: 500px) {\r\n    min-height: 4rem;\r\n    max-height: 20vh;\r\n  }\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 0.625em; /* Proportional padding */\r\n  text-transform: capitalize;\r\n`;\r\n","import { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{name}</Label>\r\n    <StyledInput placeholder={placeholder} name={name} id={name} onChange={onChange} />\r\n  </Container>\r\n);\r\n\r\nexport default Input;\r\n","import { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst TextArea = ({ name, placeholder, onChange }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{name}</Label>\r\n    <StyledTextArea placeholder={placeholder} id={name} name={name} onChange={onChange} />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default TextArea;\r\n","import styled from \"styled-components\";\r\n\r\n/* Solo estilos específicos del formulario - ContentBlock maneja el layout */\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  /* Formulario limpio que funciona dentro de ContentBlock */\r\n  width: 100%;\r\n  /* Allow the form to grow horizontally but cap to a comfortable max */\r\n  max-width: min(820px, 86vw);\r\n  margin: 1.2em auto 0; /* Slightly tighter top margin */\r\n  box-sizing: border-box;\r\n  flex: 1;\r\n  min-height: 0; /* Permite que se comprima si es necesario */\r\n\r\n  /* Layout interno del formulario */\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1em;\r\n\r\n  /* glass effect */\r\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.04));\r\n  border-radius: 1em;\r\n  border: 1px solid rgba(255, 255, 255, 0.12);\r\n  backdrop-filter: blur(10px);\r\n  -webkit-backdrop-filter: blur(10px);\r\n  box-shadow: 0 0.875em 2.125em rgba(0, 0, 0, 0.65);\r\n  padding: 1.1em;\r\n  transition: transform 240ms ease, box-shadow 240ms ease;\r\n\r\n  /* Responsive para pantallas medianas-altas (ej: 1536x864) */\r\n  /* On wide screens with limited height, allow more horizontal room while keeping vertical\r\n     constraints. The form will use a larger max-width but reduce padding/gap to fit. */\r\n  @media only screen and (min-width: 1200px) and (max-height: 950px) {\r\n    max-width: min(760px, 72vw);\r\n    padding: 0.85em;\r\n    gap: 0.7em;\r\n    font-size: 0.98em;\r\n  }\r\n  @media only screen and (min-width: 1200px) and (max-height: 900px) {\r\n    max-width: min(700px, 70vw);\r\n    padding: 0.75em;\r\n    gap: 0.6em;\r\n    font-size: 0.97em;\r\n  }\r\n  /* Mobile: más compacto */\r\n  @media only screen and (max-width: 768px) {\r\n    padding: 1em;\r\n    gap: 0.75em;\r\n    max-width: 90vw;\r\n  }\r\n\r\n  /* Efecto hover */\r\n  &:hover {\r\n    transform: translateY(-0.25em);\r\n    box-shadow: 0 1.25em 3em rgba(0, 0, 0, 0.7);\r\n  }\r\n\r\n  @media only screen and (max-width: 480px) {\r\n    max-width: 95vw;\r\n    padding: 1em;\r\n    gap: 1em;\r\n  }\r\n\r\n  /* Para pantallas de altura limitada (funciona desde 950px hacia abajo) */\r\n  @media only screen and (max-height: 950px) {\r\n    padding: 0.6em;\r\n    gap: 0.35em; /* much tighter vertical spacing */\r\n    margin: 0.4em auto 0; /* Menos margen superior */\r\n    /* Constrain by available viewport space but leave room for header + CTA */\r\n    max-height: calc(100vh - var(--header-height) - 100px);\r\n    overflow-y: auto; /* Scroll interno si es muy necesario */\r\n  }\r\n\r\n  /* Para pantallas muy pequeñas de altura */\r\n  @media only screen and (max-height: 500px) {\r\n    padding: 0.75em;\r\n    gap: 0.5em;\r\n    margin: 0.5em auto 0;\r\n  }\r\n\r\n  @media only screen and (max-height: 400px) {\r\n    padding: 0.5em;\r\n    gap: 0.25em;\r\n    margin: 0.25em auto 0;\r\n  }\r\n\r\n  /* Aggressive compaction for very short viewports: remove gaps between fields to free vertical space\r\n     while keeping each control usable. This is intentionally scoped to very short heights. */\r\n  @media only screen and (max-height: 900px) {\r\n    gap: 0.15em !important;\r\n    margin: 0.3em auto 0 !important;\r\n\r\n    label {\r\n      margin-bottom: 0.08rem !important;\r\n      font-size: 0.92rem !important;\r\n    }\r\n\r\n    input,\r\n    textarea {\r\n      padding: 0.42em 0.5em !important;\r\n    }\r\n\r\n    /* tighten button spacing */\r\n    ${/* scoper for ButtonContainer since it's sibling inside FormGroup */ \"\"}\r\n    & > div[role='button'],\r\n    & ${\"\"} > .ant-btn,\r\n    & .ant-btn {\r\n      padding: 0.5em 0.8em !important;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    transform: translateY(-0.25em);\r\n    box-shadow: 0 1.25em 3em rgba(0, 0, 0, 0.7);\r\n  }\r\n\r\n  /* Ant Col takes full width */\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  /* Input styles */\r\n  input,\r\n  textarea {\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    background: rgba(255, 255, 255, 0.03);\r\n    border-radius: 0.5em;\r\n    border: 1px solid rgba(255, 255, 255, 0.06);\r\n    padding: 0.75em 1em;\r\n    color: var(--color-text-primary);\r\n    outline: none;\r\n    transition: box-shadow 180ms ease, border-color 180ms ease, background 180ms ease;\r\n  }\r\n\r\n  input::placeholder,\r\n  textarea::placeholder {\r\n    color: rgba(255, 255, 255, 0.55);\r\n  }\r\n\r\n  input:focus,\r\n  textarea:focus {\r\n    border-color: rgba(255, 130, 92, 0.95);\r\n    box-shadow: 0 0.375em 1.125em rgba(255, 130, 92, 0.1);\r\n    background: rgba(255, 255, 255, 0.04);\r\n  }\r\n\r\n  label {\r\n    display: block;\r\n    margin-bottom: 0.25em;\r\n    color: rgba(255, 255, 255, 0.9);\r\n    font-weight: 600;\r\n  }\r\n\r\n  /* Para pantallas de altura limitada */\r\n  @media only screen and (max-height: 950px) {\r\n    input,\r\n    textarea {\r\n      padding: 0.5em 0.75em; /* Padding más compacto */\r\n    }\r\n\r\n    label {\r\n      margin-bottom: 0.15em; /* Menos espacio entre label e input */\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: var(--color-secondary);\r\n  height: 1em;\r\n  padding: 0 0.5em;\r\n  font-size: 0.875em;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n  margin-top: 0.5em;\r\n\r\n  button {\r\n    border-radius: 0.5em;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n\r\n    button {\r\n      width: 100%;\r\n      padding: 0.875em 1em;\r\n    }\r\n  }\r\n`;\r\n","import { Col } from \"antd\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport ContentBlock from \"../ContentBlock\";\r\nimport { FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  // El formulario como contenido personalizado para ContentBlock\r\n  const contactFormContent = (\r\n    <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n      <Col span={24}>\r\n        <Input type=\"text\" name=\"Nombre\" placeholder=\"Tu Nombre\" value={values.name || \"\"} onChange={handleChange} />\r\n        <ValidationType type=\"name\" />\r\n      </Col>\r\n      <Col span={24}>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"Email\"\r\n          placeholder=\"Tu Correo Electrónico\"\r\n          value={values.email || \"\"}\r\n          onChange={handleChange}\r\n        />\r\n        <ValidationType type=\"email\" />\r\n      </Col>\r\n      <Col span={24}>\r\n        <TextArea placeholder=\"Tu Mensaje\" value={values.message || \"\"} name=\"Mensaje\" onChange={handleChange} />\r\n        <ValidationType type=\"message\" />\r\n      </Col>\r\n      <ButtonContainer>\r\n        <Button name=\"submit\">Submit</Button>\r\n      </ButtonContainer>\r\n    </FormGroup>\r\n  );\r\n\r\n  return <ContentBlock direction=\"center\" title={title} content={content} id={id} customContent={contactFormContent} />;\r\n};\r\n\r\nexport default Contact;\r\n","import { useEffect, useState, useRef } from \"react\";\r\nimport { motion } from \"motion/react\";\r\n\r\nconst styles = {\r\n  wrapper: {\r\n    display: \"inline-block\",\r\n    whiteSpace: \"pre-wrap\",\r\n  },\r\n  srOnly: {\r\n    position: \"absolute\",\r\n    width: \"1px\",\r\n    height: \"1px\",\r\n    padding: 0,\r\n    margin: \"-1px\",\r\n    overflow: \"hidden\",\r\n    clip: \"rect(0,0,0,0)\",\r\n    border: 0,\r\n  },\r\n};\r\n\r\nexport default function DecryptedText({\r\n  text,\r\n  speed = 50,\r\n  maxIterations = 10,\r\n  sequential = false,\r\n  revealDirection = \"start\",\r\n  useOriginalCharsOnly = false,\r\n  characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!@#$%^&*()_+\",\r\n  className = \"\",\r\n  parentClassName = \"\",\r\n  encryptedClassName = \"\",\r\n  animateOn = \"hover\",\r\n  ...props\r\n}) {\r\n  const [displayText, setDisplayText] = useState(text);\r\n  const [isHovering, setIsHovering] = useState(false);\r\n  const [isScrambling, setIsScrambling] = useState(false);\r\n  const [revealedIndices, setRevealedIndices] = useState(new Set());\r\n  const [hasAnimated, setHasAnimated] = useState(false);\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    let currentIteration = 0;\r\n\r\n    const getNextIndex = (revealedSet) => {\r\n      const textLength = text.length;\r\n      switch (revealDirection) {\r\n        case \"start\":\r\n          return revealedSet.size;\r\n        case \"end\":\r\n          return textLength - 1 - revealedSet.size;\r\n        case \"center\": {\r\n          const middle = Math.floor(textLength / 2);\r\n          const offset = Math.floor(revealedSet.size / 2);\r\n          const nextIndex = revealedSet.size % 2 === 0 ? middle + offset : middle - offset - 1;\r\n\r\n          if (nextIndex >= 0 && nextIndex < textLength && !revealedSet.has(nextIndex)) {\r\n            return nextIndex;\r\n          }\r\n\r\n          for (let i = 0; i < textLength; i++) {\r\n            if (!revealedSet.has(i)) return i;\r\n          }\r\n          return 0;\r\n        }\r\n        default:\r\n          return revealedSet.size;\r\n      }\r\n    };\r\n\r\n    const availableChars = useOriginalCharsOnly\r\n      ? Array.from(new Set(text.split(\"\"))).filter((char) => char !== \" \")\r\n      : characters.split(\"\");\r\n\r\n    const shuffleText = (originalText, currentRevealed) => {\r\n      if (useOriginalCharsOnly) {\r\n        const positions = originalText.split(\"\").map((char, i) => ({\r\n          char,\r\n          isSpace: char === \" \",\r\n          index: i,\r\n          isRevealed: currentRevealed.has(i),\r\n        }));\r\n\r\n        const nonSpaceChars = positions.filter((p) => !p.isSpace && !p.isRevealed).map((p) => p.char);\r\n\r\n        for (let i = nonSpaceChars.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          [nonSpaceChars[i], nonSpaceChars[j]] = [nonSpaceChars[j], nonSpaceChars[i]];\r\n        }\r\n\r\n        let charIndex = 0;\r\n        return positions\r\n          .map((p) => {\r\n            if (p.isSpace) return \" \";\r\n            if (p.isRevealed) return originalText[p.index];\r\n            return nonSpaceChars[charIndex++];\r\n          })\r\n          .join(\"\");\r\n      } else {\r\n        return originalText\r\n          .split(\"\")\r\n          .map((char, i) => {\r\n            if (char === \" \") return \" \";\r\n            if (currentRevealed.has(i)) return originalText[i];\r\n            return availableChars[Math.floor(Math.random() * availableChars.length)];\r\n          })\r\n          .join(\"\");\r\n      }\r\n    };\r\n\r\n    if (isHovering) {\r\n      setIsScrambling(true);\r\n      interval = setInterval(() => {\r\n        setRevealedIndices((prevRevealed) => {\r\n          if (sequential) {\r\n            if (prevRevealed.size < text.length) {\r\n              const nextIndex = getNextIndex(prevRevealed);\r\n              const newRevealed = new Set(prevRevealed);\r\n              newRevealed.add(nextIndex);\r\n              setDisplayText(shuffleText(text, newRevealed));\r\n              return newRevealed;\r\n            } else {\r\n              clearInterval(interval);\r\n              setIsScrambling(false);\r\n              return prevRevealed;\r\n            }\r\n          } else {\r\n            setDisplayText(shuffleText(text, prevRevealed));\r\n            currentIteration++;\r\n            if (currentIteration >= maxIterations) {\r\n              clearInterval(interval);\r\n              setIsScrambling(false);\r\n              setDisplayText(text);\r\n            }\r\n            return prevRevealed;\r\n          }\r\n        });\r\n      }, speed);\r\n    } else {\r\n      setDisplayText(text);\r\n      setRevealedIndices(new Set());\r\n      setIsScrambling(false);\r\n    }\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  }, [isHovering, text, speed, maxIterations, sequential, revealDirection, characters, useOriginalCharsOnly]);\r\n\r\n  useEffect(() => {\r\n    if (animateOn !== \"view\" && animateOn !== \"both\") return;\r\n\r\n    const observerCallback = (entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting && !hasAnimated) {\r\n          setIsHovering(true);\r\n          setHasAnimated(true);\r\n        }\r\n      });\r\n    };\r\n\r\n    const observerOptions = {\r\n      root: null,\r\n      rootMargin: \"0px\",\r\n      threshold: 0.1,\r\n    };\r\n\r\n    const observer = new IntersectionObserver(observerCallback, observerOptions);\r\n    const currentRef = containerRef.current;\r\n    if (currentRef) {\r\n      observer.observe(currentRef);\r\n    }\r\n\r\n    return () => {\r\n      if (currentRef) {\r\n        observer.unobserve(currentRef);\r\n      }\r\n    };\r\n  }, [animateOn, hasAnimated]);\r\n\r\n  const hoverProps =\r\n    animateOn === \"hover\" || animateOn === \"both\"\r\n      ? {\r\n          onMouseEnter: () => setIsHovering(true),\r\n          onMouseLeave: () => setIsHovering(false),\r\n        }\r\n      : {};\r\n\r\n  return (\r\n    <motion.span className={parentClassName} ref={containerRef} style={styles.wrapper} {...hoverProps} {...props}>\r\n      <span style={styles.srOnly}>{displayText}</span>\r\n\r\n      <span aria-hidden=\"true\">\r\n        {displayText.split(\"\").map((char, index) => {\r\n          const isRevealedOrDone = revealedIndices.has(index) || !isScrambling || !isHovering;\r\n\r\n          return (\r\n            <span key={index} className={isRevealedOrDone ? className : encryptedClassName}>\r\n              {char}\r\n            </span>\r\n          );\r\n        })}\r\n      </span>\r\n    </motion.span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Div100vh from \"react-div-100vh\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Full = styled(Div100vh)`\r\n  width: 100%;\r\n  display: block;\r\n`;\r\n\r\ninterface FullViewportProps {\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst FullViewport = ({ children, className }: FullViewportProps) => {\r\n  React.useEffect(() => {\r\n    const setVh = () => {\r\n      const vh = window.innerHeight * 0.01;\r\n      document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\r\n    };\r\n    setVh();\r\n    window.addEventListener(\"resize\", setVh);\r\n    return () => window.removeEventListener(\"resize\", setVh);\r\n  }, []);\r\n\r\n  return (\r\n    <Full className={className} data-full-viewport=\"true\">\r\n      {children}\r\n    </Full>\r\n  );\r\n};\r\n\r\nexport default FullViewport;\r\n","import styled from \"styled-components\";\r\nimport FullViewport from \"./FullViewport\";\r\n\r\nconst FullViewportSection = styled(FullViewport)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default FullViewportSection;\r\n","import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport DecryptedText from \"../TexComponents/DecryptedText\";\r\nimport SplitText from \"../TexComponents/SplitText/SplitText\";\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n  IconWithHalo,\r\n  SectionIconWrap,\r\n} from \"./styles\";\r\nimport FullViewportSection from \"../FullViewport/FullViewportSection\";\r\n\r\nconst ContentBlock = ({\r\n  icon,\r\n  title,\r\n  content,\r\n  section,\r\n  button,\r\n  id,\r\n  direction,\r\n  customContent,\r\n  animation,\r\n}: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n  const isCenter = direction === \"center\";\r\n  // For center sections we wrap the ContentSection inside FullViewportSection (structural)\r\n  if (direction === \"center\") {\r\n    return (\r\n      <FullViewportSection>\r\n        <ContentSection>\r\n          <Fade direction=\"up\" triggerOnce>\r\n            <StyledRow justify=\"center\" align=\"middle\" id={id} direction={direction}>\r\n              {/* Single column with icon + content together */}\r\n              <Col\r\n                span={24}\r\n                style={{\r\n                  flex: \"1\",\r\n                  minHeight: 0,\r\n                  overflow: \"visible\",\r\n                }}>\r\n                <ContentWrapper $centered={true}>\r\n                  <div className=\"content-block-icon\">\r\n                    <SectionIconWrap>\r\n                      {typeof icon === \"string\" ? (\r\n                        icon.endsWith(\".png\") || icon.endsWith(\".jpg\") || icon.endsWith(\".jpeg\") ? (\r\n                          <IconWithHalo>\r\n                            <img\r\n                              src={`${process.env.PUBLIC_URL}/img/png/${icon}`}\r\n                              alt=\"\"\r\n                              className=\"responsive-icon-img\"\r\n                            />\r\n                          </IconWithHalo>\r\n                        ) : (\r\n                          <SvgIcon src={icon} width=\"min(200px, 25vh)\" height=\"min(200px, 25vh)\" />\r\n                        )\r\n                      ) : (\r\n                        icon\r\n                      )}\r\n                    </SectionIconWrap>\r\n                  </div>\r\n\r\n                  {title && <h6>{title}</h6>}\r\n                  {content && (\r\n                    <Content>\r\n                      <span>{content}</span>\r\n                    </Content>\r\n                  )}\r\n                  {customContent}\r\n                  <ButtonWrapper $centered={true}>\r\n                    {typeof button === \"object\" &&\r\n                      button.map((item: any, id: number) => (\r\n                        <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                          {item.title}\r\n                        </Button>\r\n                      ))}\r\n                  </ButtonWrapper>\r\n                </ContentWrapper>\r\n              </Col>\r\n            </StyledRow>\r\n          </Fade>\r\n        </ContentSection>\r\n      </FullViewportSection>\r\n    );\r\n  }\r\n\r\n  // Non-center directions keep the original layout\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={isCenter ? \"up\" : direction} triggerOnce>\r\n        <StyledRow justify={isCenter ? \"center\" : \"space-between\"} align=\"middle\" id={id} direction={direction}>\r\n          {/* ...existing non-center layout... */}\r\n          <>\r\n            <Col lg={11} md={11} sm={12} xs={24} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              {typeof icon === \"string\" ? (\r\n                icon.endsWith(\".png\") || icon.endsWith(\".jpg\") || icon.endsWith(\".jpeg\") ? (\r\n                  <img\r\n                    src={`${process.env.PUBLIC_URL}/img/png/${icon}`}\r\n                    alt=\"\"\r\n                    style={{\r\n                      width: \"min(100%, 40vh)\",\r\n                      height: \"min(100%, 40vh)\",\r\n                      objectFit: \"contain\",\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <SvgIcon src={icon} width=\"min(100%, 40vh)\" height=\"min(100%, 40vh)\" />\r\n                )\r\n              ) : (\r\n                icon\r\n              )}\r\n            </Col>\r\n            <Col lg={11} md={11} sm={11} xs={24} style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <ContentWrapper style={{ flex: \"1\", display: \"flex\", flexDirection: \"column\" }}>\r\n                <h6>\r\n                  <DecryptedText text={title} animateOn=\"view\" revealDirection=\"center\" speed={45} maxIterations={30} />\r\n                </h6>\r\n                <Content>\r\n                  <span>{content}</span>\r\n                </Content>\r\n                {customContent}\r\n                {direction === \"right\" ? (\r\n                  <ButtonWrapper>\r\n                    {typeof button === \"object\" &&\r\n                      button.map((item: any, id: number) => (\r\n                        <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                          {item.title}\r\n                        </Button>\r\n                      ))}\r\n                  </ButtonWrapper>\r\n                ) : (\r\n                  <ServiceWrapper>\r\n                    <Row justify=\"space-between\">\r\n                      {typeof section === \"object\" &&\r\n                        section.map((item: any, id: number) => (\r\n                          <Col key={id} span={11}>\r\n                            <SvgIcon src={item.icon} width=\"60px\" height=\"60px\" />\r\n                            <MinTitle>{item.title}</MinTitle>\r\n                            <MinPara>{item.content}</MinPara>\r\n                          </Col>\r\n                        ))}\r\n                    </Row>\r\n                  </ServiceWrapper>\r\n                )}\r\n              </ContentWrapper>\r\n            </Col>\r\n          </>\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default ContentBlock;\r\n"],"names":["initialValues","name","email","message","validate","values","errors","test","Container","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","StyledContainer","StyledTextArea","Label","_templateObject3","_ref","placeholder","onChange","_jsxs","children","_jsx","htmlFor","id","FormGroup","Span","ButtonContainer","title","content","handleChange","handleSubmit","formState","setFormState","useState","_objectSpread","event","persist","value","target","prevState","async","preventDefault","Object","every","error","fetch","method","headers","body","JSON","stringify","ok","reset","notification","description","useForm","ValidationType","_ref2","type","ErrorMessage","contactFormContent","autoComplete","onSubmit","Col","span","Input","TextArea","Button","ContentBlock","direction","customContent","styles","wrapper","display","whiteSpace","srOnly","position","width","height","padding","margin","overflow","clip","border","DecryptedText","text","speed","maxIterations","sequential","revealDirection","useOriginalCharsOnly","characters","className","parentClassName","encryptedClassName","animateOn","props","_objectWithoutProperties","_excluded","displayText","setDisplayText","isHovering","setIsHovering","isScrambling","setIsScrambling","revealedIndices","setRevealedIndices","Set","hasAnimated","setHasAnimated","containerRef","useRef","useEffect","interval","currentIteration","availableChars","Array","from","split","filter","char","shuffleText","originalText","currentRevealed","positions","map","i","isSpace","index","isRevealed","has","nonSpaceChars","p","length","j","Math","floor","random","charIndex","join","setInterval","prevRevealed","size","nextIndex","revealedSet","textLength","middle","offset","getNextIndex","newRevealed","add","clearInterval","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","root","rootMargin","threshold","currentRef","current","observe","unobserve","hoverProps","onMouseEnter","onMouseLeave","motion","ref","style","isRevealedOrDone","Full","Div100vh","React","setVh","vh","window","innerHeight","document","documentElement","setProperty","concat","addEventListener","removeEventListener","FullViewport","icon","section","button","animation","scrollTo","getElementById","scrollIntoView","behavior","isCenter","FullViewportSection","ContentSection","Fade","triggerOnce","StyledRow","justify","align","flex","minHeight","ContentWrapper","$centered","SectionIconWrap","endsWith","IconWithHalo","src","process","alt","SvgIcon","Content","ButtonWrapper","item","color","onClick","_Fragment","lg","md","sm","xs","alignItems","objectFit","flexDirection","ServiceWrapper","Row","MinTitle","MinPara"],"sourceRoot":""}