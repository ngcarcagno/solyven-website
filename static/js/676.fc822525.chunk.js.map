{"version":3,"file":"static/js/676.fc822525.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    const url = \"\"; // Fill in your API URL here\r\n\r\n    try {\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        const response = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          notification[\"error\"]({\r\n            message: \"Error\",\r\n            description:\r\n              \"There was an error sending your message, please try again later.\",\r\n          });\r\n        } else {\r\n          event.target.reset();\r\n          setFormState(() => ({\r\n            values: { ...initialValues },\r\n            errors: { ...initialValues },\r\n          }));\r\n\r\n          notification[\"success\"]({\r\n            message: \"Success\",\r\n            description: \"Your message has been sent!\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit form. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n}\r\n\r\nconst Block = ({ title, content }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{title}</h6>\r\n      <TextWrapper>\r\n        <Content>{content}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Block;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{name}</Label>\r\n    <StyledInput placeholder={placeholder} name={name} id={name} onChange={onChange} />\r\n  </Container>\r\n);\r\n\r\nexport default Input;\r\n","import { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst TextArea = ({ name, placeholder, onChange }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{name}</Label>\r\n    <StyledTextArea placeholder={placeholder} id={name} name={name} onChange={onChange} />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default TextArea;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 1rem; /* Agregar padding horizontal */\r\n  position: relative;\r\n  min-height: 100vh;\r\n  scroll-snap-align: start;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 1rem; /* Ajustar padding en pantallas pequeñas */\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">Submit</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n"],"names":["initialValues","name","email","message","validate","values","errors","test","Content","styled","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","TextWrapper","_templateObject3","_ref","title","content","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","handleChange","handleSubmit","formState","setFormState","useState","_objectSpread","event","persist","value","target","prevState","async","preventDefault","Object","every","error","fetch","method","headers","body","JSON","stringify","ok","reset","notification","description","useForm","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}