{"version":3,"file":"static/js/264.5095cc46.chunk.js","mappings":"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","sources":["components/TexComponents/DecryptedText.js","components/TexComponents/SplitText/SplitText.js","components/ContentBlock/index.tsx"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport { motion } from \"motion/react\";\r\n\r\nconst styles = {\r\n  wrapper: {\r\n    display: \"inline-block\",\r\n    whiteSpace: \"pre-wrap\",\r\n  },\r\n  srOnly: {\r\n    position: \"absolute\",\r\n    width: \"1px\",\r\n    height: \"1px\",\r\n    padding: 0,\r\n    margin: \"-1px\",\r\n    overflow: \"hidden\",\r\n    clip: \"rect(0,0,0,0)\",\r\n    border: 0,\r\n  },\r\n};\r\n\r\nexport default function DecryptedText({\r\n  text,\r\n  speed = 50,\r\n  maxIterations = 10,\r\n  sequential = false,\r\n  revealDirection = \"start\",\r\n  useOriginalCharsOnly = false,\r\n  characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!@#$%^&*()_+\",\r\n  className = \"\",\r\n  parentClassName = \"\",\r\n  encryptedClassName = \"\",\r\n  animateOn = \"hover\",\r\n  ...props\r\n}) {\r\n  const [displayText, setDisplayText] = useState(text);\r\n  const [isHovering, setIsHovering] = useState(false);\r\n  const [isScrambling, setIsScrambling] = useState(false);\r\n  const [revealedIndices, setRevealedIndices] = useState(new Set());\r\n  const [hasAnimated, setHasAnimated] = useState(false);\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    let currentIteration = 0;\r\n\r\n    const getNextIndex = (revealedSet) => {\r\n      const textLength = text.length;\r\n      switch (revealDirection) {\r\n        case \"start\":\r\n          return revealedSet.size;\r\n        case \"end\":\r\n          return textLength - 1 - revealedSet.size;\r\n        case \"center\": {\r\n          const middle = Math.floor(textLength / 2);\r\n          const offset = Math.floor(revealedSet.size / 2);\r\n          const nextIndex = revealedSet.size % 2 === 0 ? middle + offset : middle - offset - 1;\r\n\r\n          if (nextIndex >= 0 && nextIndex < textLength && !revealedSet.has(nextIndex)) {\r\n            return nextIndex;\r\n          }\r\n\r\n          for (let i = 0; i < textLength; i++) {\r\n            if (!revealedSet.has(i)) return i;\r\n          }\r\n          return 0;\r\n        }\r\n        default:\r\n          return revealedSet.size;\r\n      }\r\n    };\r\n\r\n    const availableChars = useOriginalCharsOnly\r\n      ? Array.from(new Set(text.split(\"\"))).filter((char) => char !== \" \")\r\n      : characters.split(\"\");\r\n\r\n    const shuffleText = (originalText, currentRevealed) => {\r\n      if (useOriginalCharsOnly) {\r\n        const positions = originalText.split(\"\").map((char, i) => ({\r\n          char,\r\n          isSpace: char === \" \",\r\n          index: i,\r\n          isRevealed: currentRevealed.has(i),\r\n        }));\r\n\r\n        const nonSpaceChars = positions.filter((p) => !p.isSpace && !p.isRevealed).map((p) => p.char);\r\n\r\n        for (let i = nonSpaceChars.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          [nonSpaceChars[i], nonSpaceChars[j]] = [nonSpaceChars[j], nonSpaceChars[i]];\r\n        }\r\n\r\n        let charIndex = 0;\r\n        return positions\r\n          .map((p) => {\r\n            if (p.isSpace) return \" \";\r\n            if (p.isRevealed) return originalText[p.index];\r\n            return nonSpaceChars[charIndex++];\r\n          })\r\n          .join(\"\");\r\n      } else {\r\n        return originalText\r\n          .split(\"\")\r\n          .map((char, i) => {\r\n            if (char === \" \") return \" \";\r\n            if (currentRevealed.has(i)) return originalText[i];\r\n            return availableChars[Math.floor(Math.random() * availableChars.length)];\r\n          })\r\n          .join(\"\");\r\n      }\r\n    };\r\n\r\n    if (isHovering) {\r\n      setIsScrambling(true);\r\n      interval = setInterval(() => {\r\n        setRevealedIndices((prevRevealed) => {\r\n          if (sequential) {\r\n            if (prevRevealed.size < text.length) {\r\n              const nextIndex = getNextIndex(prevRevealed);\r\n              const newRevealed = new Set(prevRevealed);\r\n              newRevealed.add(nextIndex);\r\n              setDisplayText(shuffleText(text, newRevealed));\r\n              return newRevealed;\r\n            } else {\r\n              clearInterval(interval);\r\n              setIsScrambling(false);\r\n              return prevRevealed;\r\n            }\r\n          } else {\r\n            setDisplayText(shuffleText(text, prevRevealed));\r\n            currentIteration++;\r\n            if (currentIteration >= maxIterations) {\r\n              clearInterval(interval);\r\n              setIsScrambling(false);\r\n              setDisplayText(text);\r\n            }\r\n            return prevRevealed;\r\n          }\r\n        });\r\n      }, speed);\r\n    } else {\r\n      setDisplayText(text);\r\n      setRevealedIndices(new Set());\r\n      setIsScrambling(false);\r\n    }\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  }, [isHovering, text, speed, maxIterations, sequential, revealDirection, characters, useOriginalCharsOnly]);\r\n\r\n  useEffect(() => {\r\n    if (animateOn !== \"view\" && animateOn !== \"both\") return;\r\n\r\n    const observerCallback = (entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting && !hasAnimated) {\r\n          setIsHovering(true);\r\n          setHasAnimated(true);\r\n        }\r\n      });\r\n    };\r\n\r\n    const observerOptions = {\r\n      root: null,\r\n      rootMargin: \"0px\",\r\n      threshold: 0.1,\r\n    };\r\n\r\n    const observer = new IntersectionObserver(observerCallback, observerOptions);\r\n    const currentRef = containerRef.current;\r\n    if (currentRef) {\r\n      observer.observe(currentRef);\r\n    }\r\n\r\n    return () => {\r\n      if (currentRef) {\r\n        observer.unobserve(currentRef);\r\n      }\r\n    };\r\n  }, [animateOn, hasAnimated]);\r\n\r\n  const hoverProps =\r\n    animateOn === \"hover\" || animateOn === \"both\"\r\n      ? {\r\n          onMouseEnter: () => setIsHovering(true),\r\n          onMouseLeave: () => setIsHovering(false),\r\n        }\r\n      : {};\r\n\r\n  return (\r\n    <motion.span className={parentClassName} ref={containerRef} style={styles.wrapper} {...hoverProps} {...props}>\r\n      <span style={styles.srOnly}>{displayText}</span>\r\n\r\n      <span aria-hidden=\"true\">\r\n        {displayText.split(\"\").map((char, index) => {\r\n          const isRevealedOrDone = revealedIndices.has(index) || !isScrambling || !isHovering;\r\n\r\n          return (\r\n            <span key={index} className={isRevealedOrDone ? className : encryptedClassName}>\r\n              {char}\r\n            </span>\r\n          );\r\n        })}\r\n      </span>\r\n    </motion.span>\r\n  );\r\n}\r\n","import { useRef, useEffect, useState } from \"react\";\r\nimport { gsap } from \"gsap\";\r\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\r\nimport { SplitText as GSAPSplitText } from \"gsap/SplitText\";\r\nimport { useGSAP } from \"@gsap/react\";\r\n\r\ngsap.registerPlugin(ScrollTrigger, GSAPSplitText, useGSAP);\r\n\r\nconst SplitText = ({\r\n  text,\r\n  className = \"\",\r\n  delay = 100,\r\n  duration = 0.6,\r\n  ease = \"power3.out\",\r\n  splitType = \"chars\",\r\n  from = { opacity: 0, y: 40 },\r\n  to = { opacity: 1, y: 0 },\r\n  threshold = 0.1,\r\n  rootMargin = \"-100px\",\r\n  textAlign = \"center\",\r\n  tag = \"p\",\r\n  onLetterAnimationComplete,\r\n}) => {\r\n  const ref = useRef(null);\r\n  const [fontsLoaded, setFontsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (document.fonts.status === \"loaded\") {\r\n      setFontsLoaded(true);\r\n    } else {\r\n      document.fonts.ready.then(() => {\r\n        setFontsLoaded(true);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useGSAP(\r\n    () => {\r\n      if (!ref.current || !text || !fontsLoaded) return;\r\n      const el = ref.current;\r\n\r\n      if (el._rbsplitInstance) {\r\n        try {\r\n          el._rbsplitInstance.revert();\r\n        } catch (_) {\r\n          /* noop */\r\n        }\r\n        el._rbsplitInstance = null;\r\n      }\r\n\r\n      let targets;\r\n      const assignTargets = (self) => {\r\n        if (splitType.includes(\"chars\") && self.chars.length) targets = self.chars;\r\n        if (!targets && splitType.includes(\"words\") && self.words.length) targets = self.words;\r\n        if (!targets && splitType.includes(\"lines\") && self.lines.length) targets = self.lines;\r\n        if (!targets) targets = self.chars || self.words || self.lines;\r\n      };\r\n\r\n      const splitInstance = new GSAPSplitText(el, {\r\n        type: splitType,\r\n        smartWrap: true,\r\n        autoSplit: splitType === \"lines\",\r\n        linesClass: \"split-line\",\r\n        wordsClass: \"split-word\",\r\n        charsClass: \"split-char\",\r\n        reduceWhiteSpace: false,\r\n        onSplit: (self) => {\r\n          assignTargets(self);\r\n          const tween = gsap.fromTo(\r\n            targets,\r\n            { ...from },\r\n            {\r\n              ...to,\r\n              duration,\r\n              ease,\r\n              stagger: delay / 1000,\r\n              scrollTrigger: {\r\n                trigger: el,\r\n                start: `top ${100 - threshold * 100}%`,\r\n                end: \"bottom 20%\",\r\n                once: true,\r\n                toggleActions: \"play none none none\",\r\n                fastScrollEnd: true,\r\n                refreshPriority: 1,\r\n                markers: false,\r\n              },\r\n              onComplete: () => {\r\n                onLetterAnimationComplete?.();\r\n              },\r\n              willChange: \"transform, opacity\",\r\n              force3D: true,\r\n            }\r\n          );\r\n          return tween;\r\n        },\r\n      });\r\n\r\n      el._rbsplitInstance = splitInstance;\r\n\r\n      return () => {\r\n        ScrollTrigger.getAll().forEach((st) => {\r\n          if (st.trigger === el) st.kill();\r\n        });\r\n        try {\r\n          splitInstance.revert();\r\n        } catch (_) {\r\n          /* noop */\r\n        }\r\n        el._rbsplitInstance = null;\r\n      };\r\n    },\r\n    {\r\n      dependencies: [\r\n        text,\r\n        delay,\r\n        duration,\r\n        ease,\r\n        splitType,\r\n        JSON.stringify(from),\r\n        JSON.stringify(to),\r\n        threshold,\r\n        rootMargin,\r\n        fontsLoaded,\r\n        onLetterAnimationComplete,\r\n      ],\r\n      scope: ref,\r\n    }\r\n  );\r\n\r\n  const renderTag = () => {\r\n    const style = {\r\n      textAlign,\r\n      overflow: \"visible\",\r\n      display: \"block\",\r\n      whiteSpace: \"nowrap\",\r\n      wordWrap: \"normal\",\r\n      willChange: \"transform, opacity\",\r\n      width: \"100%\",\r\n      minWidth: \"fit-content\",\r\n    };\r\n\r\n    // Para pantallas ultra pequeñas, usar CSS responsive\r\n    // Remover la lógica JS y usar solo CSS para mejor consistencia\r\n    const classes = `split-parent split-responsive ${className}`;\r\n    switch (tag) {\r\n      case \"h1\":\r\n        return (\r\n          <h1 ref={ref} style={style} className={classes}>\r\n            {text}\r\n          </h1>\r\n        );\r\n      case \"h2\":\r\n        return (\r\n          <h2 ref={ref} style={style} className={classes}>\r\n            {text}\r\n          </h2>\r\n        );\r\n      case \"h3\":\r\n        return (\r\n          <h3 ref={ref} style={style} className={classes}>\r\n            {text}\r\n          </h3>\r\n        );\r\n      case \"h4\":\r\n        return (\r\n          <h4 ref={ref} style={style} className={classes}>\r\n            {text}\r\n          </h4>\r\n        );\r\n      case \"h5\":\r\n        return (\r\n          <h5 ref={ref} style={style} className={classes}>\r\n            {text}\r\n          </h5>\r\n        );\r\n      case \"h6\":\r\n        return (\r\n          <h6 ref={ref} style={style} className={classes}>\r\n            {text}\r\n          </h6>\r\n        );\r\n      default:\r\n        return (\r\n          <p ref={ref} style={style} className={classes}>\r\n            {text}\r\n          </p>\r\n        );\r\n    }\r\n  };\r\n  return renderTag();\r\n};\r\n\r\nexport default SplitText;\r\n","import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport DecryptedText from \"../TexComponents/DecryptedText\";\r\nimport SplitText from \"../TexComponents/SplitText/SplitText\";\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n  IconWithHalo,\r\n} from \"./styles\";\r\n\r\nconst ContentBlock = ({\r\n  icon,\r\n  title,\r\n  content,\r\n  section,\r\n  button,\r\n  id,\r\n  direction,\r\n  customContent,\r\n  animation,\r\n}: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={direction === \"center\" ? \"up\" : direction} triggerOnce>\r\n        <StyledRow\r\n          justify={direction === \"center\" ? \"center\" : \"space-between\"}\r\n          align=\"middle\"\r\n          id={id}\r\n          direction={direction}>\r\n          {direction === \"center\" ? (\r\n            <>\r\n              <Col span={24} className=\"content-block-icon\" style={{ flex: \"0 0 auto\" }}>\r\n                {typeof icon === \"string\" ? (\r\n                  icon.endsWith(\".png\") || icon.endsWith(\".jpg\") || icon.endsWith(\".jpeg\") ? (\r\n                    <IconWithHalo>\r\n                      <img src={`${process.env.PUBLIC_URL}/img/png/${icon}`} alt=\"\" className=\"responsive-icon-img\" />\r\n                    </IconWithHalo>\r\n                  ) : (\r\n                    <SvgIcon src={icon} width=\"min(200px, 25vh)\" height=\"min(200px, 25vh)\" />\r\n                  )\r\n                ) : (\r\n                  icon\r\n                )}\r\n              </Col>\r\n              <Col\r\n                span={24}\r\n                style={{\r\n                  flex: \"1\",\r\n                  minHeight: 0,\r\n                  overflow: \"visible\",\r\n                }}>\r\n                <ContentWrapper $centered={true}>\r\n                  {title && (\r\n                    <h6>\r\n                      {animation === \"DecryptedText\" ? (\r\n                        <DecryptedText\r\n                          text={title}\r\n                          animateOn=\"view\"\r\n                          revealDirection=\"start\"\r\n                          speed={30}\r\n                          maxIterations={10}\r\n                          sequential={true}\r\n                        />\r\n                      ) : animation === \"SplitText\" ? (\r\n                        <SplitText text={title} tag=\"h6\" className=\"split-title\" onLetterAnimationComplete={() => {}} />\r\n                      ) : (\r\n                        <span>{title}</span>\r\n                      )}\r\n                    </h6>\r\n                  )}\r\n                  {content && (\r\n                    <Content>\r\n                      <span>{content}</span>\r\n                    </Content>\r\n                  )}\r\n                  {customContent}\r\n                  <ButtonWrapper $centered={true}>\r\n                    {typeof button === \"object\" &&\r\n                      button.map(\r\n                        (\r\n                          item: {\r\n                            color?: string;\r\n                            title: string;\r\n                          },\r\n                          id: number\r\n                        ) => {\r\n                          return (\r\n                            <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                              {item.title}\r\n                            </Button>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </ButtonWrapper>\r\n                  {typeof section === \"object\" && (\r\n                    <ServiceWrapper style={{ justifyContent: \"center\", flexWrap: \"wrap\", gap: \"2rem\" }}>\r\n                      <Row justify=\"center\" gutter={[32, 32]}>\r\n                        {section.map(\r\n                          (\r\n                            item: {\r\n                              title: string;\r\n                              content: string;\r\n                              icon: string;\r\n                            },\r\n                            id: number\r\n                          ) => {\r\n                            return (\r\n                              <Col key={id} xs={24} sm={12} md={8} lg={6} style={{ textAlign: \"center\" }}>\r\n                                <SvgIcon src={item.icon} width=\"60px\" height=\"60px\" />\r\n                                <MinTitle>{item.title}</MinTitle>\r\n                                <MinPara>{item.content}</MinPara>\r\n                              </Col>\r\n                            );\r\n                          }\r\n                        )}\r\n                      </Row>\r\n                    </ServiceWrapper>\r\n                  )}\r\n                </ContentWrapper>\r\n              </Col>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Col lg={11} md={11} sm={12} xs={24} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                {typeof icon === \"string\" ? (\r\n                  icon.endsWith(\".png\") || icon.endsWith(\".jpg\") || icon.endsWith(\".jpeg\") ? (\r\n                    <img\r\n                      src={`${process.env.PUBLIC_URL}/img/png/${icon}`}\r\n                      alt=\"\"\r\n                      style={{\r\n                        width: \"min(100%, 40vh)\",\r\n                        height: \"min(100%, 40vh)\",\r\n                        objectFit: \"contain\",\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    <SvgIcon src={icon} width=\"min(100%, 40vh)\" height=\"min(100%, 40vh)\" />\r\n                  )\r\n                ) : (\r\n                  icon\r\n                )}\r\n              </Col>\r\n              <Col lg={11} md={11} sm={11} xs={24} style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <ContentWrapper style={{ flex: \"1\", display: \"flex\", flexDirection: \"column\" }}>\r\n                  <h6>\r\n                    <DecryptedText\r\n                      text={title}\r\n                      animateOn=\"view\"\r\n                      revealDirection=\"center\"\r\n                      speed={45}\r\n                      maxIterations={30}\r\n                    />\r\n                  </h6>\r\n                  <Content>\r\n                    <span>{content}</span>\r\n                  </Content>\r\n                  {customContent}\r\n                  {direction === \"right\" ? (\r\n                    <ButtonWrapper>\r\n                      {typeof button === \"object\" &&\r\n                        button.map(\r\n                          (\r\n                            item: {\r\n                              color?: string;\r\n                              title: string;\r\n                            },\r\n                            id: number\r\n                          ) => {\r\n                            return (\r\n                              <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                                {item.title}\r\n                              </Button>\r\n                            );\r\n                          }\r\n                        )}\r\n                    </ButtonWrapper>\r\n                  ) : (\r\n                    <ServiceWrapper>\r\n                      <Row justify=\"space-between\">\r\n                        {typeof section === \"object\" &&\r\n                          section.map(\r\n                            (\r\n                              item: {\r\n                                title: string;\r\n                                content: string;\r\n                                icon: string;\r\n                              },\r\n                              id: number\r\n                            ) => {\r\n                              return (\r\n                                <Col key={id} span={11}>\r\n                                  <SvgIcon src={item.icon} width=\"60px\" height=\"60px\" />\r\n                                  <MinTitle>{item.title}</MinTitle>\r\n                                  <MinPara>{item.content}</MinPara>\r\n                                </Col>\r\n                              );\r\n                            }\r\n                          )}\r\n                      </Row>\r\n                    </ServiceWrapper>\r\n                  )}\r\n                </ContentWrapper>\r\n              </Col>\r\n            </>\r\n          )}\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default ContentBlock;\r\n"],"names":["styles","wrapper","display","whiteSpace","srOnly","position","width","height","padding","margin","overflow","clip","border","DecryptedText","_ref","text","speed","maxIterations","sequential","revealDirection","useOriginalCharsOnly","characters","className","parentClassName","encryptedClassName","animateOn","props","_objectWithoutProperties","_excluded","displayText","setDisplayText","useState","isHovering","setIsHovering","isScrambling","setIsScrambling","revealedIndices","setRevealedIndices","Set","hasAnimated","setHasAnimated","containerRef","useRef","useEffect","interval","currentIteration","availableChars","Array","from","split","filter","char","shuffleText","originalText","currentRevealed","positions","map","i","isSpace","index","isRevealed","has","nonSpaceChars","p","length","j","Math","floor","random","charIndex","join","setInterval","prevRevealed","size","nextIndex","revealedSet","textLength","middle","offset","getNextIndex","newRevealed","add","clearInterval","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","root","rootMargin","threshold","currentRef","current","observe","unobserve","hoverProps","onMouseEnter","onMouseLeave","_jsxs","motion","span","_objectSpread","ref","style","children","_jsx","isRevealedOrDone","gsap","registerPlugin","ScrollTrigger","GSAPSplitText","useGSAP","delay","duration","ease","splitType","opacity","y","to","textAlign","tag","onLetterAnimationComplete","fontsLoaded","setFontsLoaded","document","fonts","status","ready","then","el","_rbsplitInstance","revert","_","targets","splitInstance","type","smartWrap","autoSplit","linesClass","wordsClass","charsClass","reduceWhiteSpace","onSplit","self","includes","chars","words","lines","assignTargets","fromTo","stagger","scrollTrigger","trigger","start","concat","end","once","toggleActions","fastScrollEnd","refreshPriority","markers","onComplete","willChange","force3D","getAll","st","kill","dependencies","JSON","stringify","scope","renderTag","wordWrap","minWidth","classes","icon","title","content","section","button","id","direction","customContent","animation","scrollTo","getElementById","scrollIntoView","behavior","ContentSection","Fade","triggerOnce","StyledRow","justify","align","_Fragment","Col","flex","endsWith","IconWithHalo","src","process","alt","SvgIcon","minHeight","ContentWrapper","$centered","SplitText","Content","ButtonWrapper","item","Button","color","onClick","ServiceWrapper","justifyContent","flexWrap","gap","Row","gutter","xs","sm","md","lg","MinTitle","MinPara","alignItems","objectFit","flexDirection"],"sourceRoot":""}