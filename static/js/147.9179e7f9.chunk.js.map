{"version":3,"file":"static/js/147.9179e7f9.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    const url = \"\"; // Fill in your API URL here\r\n\r\n    try {\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        const response = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          notification[\"error\"]({\r\n            message: \"Error\",\r\n            description:\r\n              \"There was an error sending your message, please try again later.\",\r\n          });\r\n        } else {\r\n          event.target.reset();\r\n          setFormState(() => ({\r\n            values: { ...initialValues },\r\n            errors: { ...initialValues },\r\n          }));\r\n\r\n          notification[\"success\"]({\r\n            message: \"Success\",\r\n            description: \"Your message has been sent!\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit form. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 0.625em 0.3125em; /* Proportional padding */\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875em; /* Proportional font size */\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 0.625em 0.3125em; /* Proportional padding */\r\n  margin-bottom: -0.625em; /* Proportional margin */\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875em; /* Proportional font size */\r\n  height: 11.5625em; /* Proportional height */\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 0.625em; /* Proportional padding */\r\n  text-transform: capitalize;\r\n`;\r\n","import { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{name}</Label>\r\n    <StyledInput placeholder={placeholder} name={name} id={name} onChange={onChange} />\r\n  </Container>\r\n);\r\n\r\nexport default Input;\r\n","import { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst TextArea = ({ name, placeholder, onChange }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{name}</Label>\r\n    <StyledTextArea placeholder={placeholder} id={name} name={name} onChange={onChange} />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default TextArea;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"section\")`\r\n  position: relative;\r\n  min-height: 100vh;\r\n  scroll-snap-align: start;\r\n  padding: 0 2em; /* Proportional horizontal padding */\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center; /* Centrar verticalmente */\r\n\r\n  @media (max-width: 768px) {\r\n    /* Mobile: Layout vertical específico */\r\n    padding: 4.5em 1.5em 1em 1.5em; /* Top padding para header fijo */\r\n    min-height: 100vh;\r\n    align-items: flex-start; /* No centrar, empezar desde arriba */\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  max-width: min(85vw, 570px); /* Same as MiddleBlock ContentWrapper */\r\n  width: 100%;\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  padding: 0.6em 0 0.6em; /* Same as MiddleBlock Content */\r\n`;\r\n\r\nexport const MobileHeaderSection = styled(\"div\")`\r\n  /* Desktop: comportamiento normal */\r\n  width: 100%;\r\n  \r\n  @media (max-width: 768px) {\r\n    height: 30vh; /* 30% del viewport para título/subtítulo */\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const MobileFormSection = styled(\"div\")`\r\n  /* Desktop: comportamiento normal */\r\n  width: 100%;\r\n  \r\n  @media (max-width: 768px) {\r\n    height: 70vh; /* 70% del viewport para el formulario */\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    width: 100%;\r\n    overflow-y: auto; /* Scroll si el formulario es muy grande */\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 56.25em;\r\n  min-width: 20em;\r\n  box-sizing: border-box;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1em;\r\n\r\n  /* glass effect */\r\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.04));\r\n  border-radius: 1em;\r\n  border: 1px solid rgba(255, 255, 255, 0.12);\r\n  backdrop-filter: blur(10px);\r\n  -webkit-backdrop-filter: blur(10px);\r\n  box-shadow: 0 0.875em 2.125em rgba(0, 0, 0, 0.65);\r\n  padding: 1.25em;\r\n  transition: transform 240ms ease, box-shadow 240ms ease;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    max-width: 100%; /* Ocupar todo el ancho disponible en MobileFormSection */\r\n    padding: 1em;\r\n    gap: 0.75em;\r\n    height: fit-content; /* Ajustar altura al contenido */\r\n    min-height: auto; /* No forzar altura mínima */\r\n  }\r\n\r\n  @media only screen and (max-width: 480px) {\r\n    max-width: 95vw;\r\n    padding: 1em;\r\n    gap: 1em;\r\n  }\r\n\r\n  &:hover {\r\n    transform: translateY(-0.25em);\r\n    box-shadow: 0 1.25em 3em rgba(0, 0, 0, 0.7);\r\n  }\r\n\r\n  /* Ant Col takes full width */\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  /* Input styles */\r\n  input,\r\n  textarea {\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    background: rgba(255, 255, 255, 0.03);\r\n    border-radius: 0.5em;\r\n    border: 1px solid rgba(255, 255, 255, 0.06);\r\n    padding: 0.75em 1em;\r\n    color: var(--color-text-primary);\r\n    outline: none;\r\n    transition: box-shadow 180ms ease, border-color 180ms ease, background 180ms ease;\r\n  }\r\n\r\n  input::placeholder,\r\n  textarea::placeholder {\r\n    color: rgba(255, 255, 255, 0.55);\r\n  }\r\n\r\n  input:focus,\r\n  textarea:focus {\r\n    border-color: rgba(255, 130, 92, 0.95);\r\n    box-shadow: 0 0.375em 1.125em rgba(255, 130, 92, 0.1);\r\n    background: rgba(255, 255, 255, 0.04);\r\n  }\r\n\r\n  label {\r\n    display: block;\r\n    margin-bottom: 0.25em;\r\n    color: rgba(255, 255, 255, 0.9);\r\n    font-weight: 600;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: var(--color-secondary);\r\n  height: 1em;\r\n  padding: 0 0.5em;\r\n  font-size: 0.875em;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n  margin-top: 0.5em;\r\n\r\n  button {\r\n    border-radius: 0.5em;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n\r\n    button {\r\n      width: 100%;\r\n      padding: 0.875em 1em;\r\n    }\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, ContentWrapper, Content, MobileHeaderSection, MobileFormSection, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Slide direction=\"up\" triggerOnce>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <ContentWrapper>\r\n            <Col lg={24} md={24} sm={24} xs={24}>\r\n              {/* Header Section - 30% en mobile */}\r\n              <MobileHeaderSection>\r\n                <h6>{title}</h6>\r\n                <Content>{content}</Content>\r\n              </MobileHeaderSection>\r\n              \r\n              {/* Form Section - 70% en mobile */}\r\n              <MobileFormSection>\r\n                <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                <Col span={24}>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"Nombre\"\r\n                    placeholder=\"Tu Nombre\"\r\n                    value={values.name || \"\"}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <ValidationType type=\"name\" />\r\n                </Col>\r\n                <Col span={24}>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"Email\"\r\n                    placeholder=\"Tu Correo Electrónico\"\r\n                    value={values.email || \"\"}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <ValidationType type=\"email\" />\r\n                </Col>\r\n                <Col span={24}>\r\n                  <TextArea\r\n                    placeholder=\"Tu Mensaje\"\r\n                    value={values.message || \"\"}\r\n                    name=\"Mensaje\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <ValidationType type=\"message\" />\r\n                </Col>\r\n                  <ButtonContainer>\r\n                    <Button name=\"submit\">Submit</Button>\r\n                  </ButtonContainer>\r\n                </FormGroup>\r\n              </MobileFormSection>\r\n            </Col>\r\n          </ContentWrapper>\r\n        </Row>\r\n      </Slide>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n"],"names":["initialValues","name","email","message","validate","values","errors","test","Container","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","StyledContainer","StyledTextArea","Label","_templateObject3","_ref","placeholder","onChange","_jsxs","children","_jsx","htmlFor","id","ContactContainer","ContentWrapper","Content","MobileHeaderSection","_templateObject4","MobileFormSection","_templateObject5","FormGroup","_templateObject6","Span","_templateObject7","ButtonContainer","_templateObject8","title","content","handleChange","handleSubmit","formState","setFormState","useState","_objectSpread","event","persist","value","target","prevState","async","preventDefault","Object","every","error","fetch","method","headers","body","JSON","stringify","ok","reset","notification","description","useForm","ValidationType","_ref2","type","ErrorMessage","Slide","direction","triggerOnce","Row","justify","align","Col","lg","md","sm","xs","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}