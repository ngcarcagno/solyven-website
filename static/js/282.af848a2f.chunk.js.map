{"version":3,"file":"static/js/282.af848a2f.chunk.js","mappings":"wNAiBA,MAqIA,EArIqBA,IAAkF,IAAjF,KAAEC,EAAI,MAAEC,EAAK,QAAEC,EAAO,QAAEC,EAAO,OAAEC,EAAM,GAAEC,EAAE,UAAEC,GAA8BP,EAC/F,MAAMQ,EAAYF,IACAG,SAASC,eAAeJ,GAChCK,eAAe,CACrBC,SAAU,UACV,EAGJ,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAAAC,UACbF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACT,UAAyB,WAAdA,EAAyB,KAAOA,EAAWU,aAAW,EAAAF,UACrEF,EAAAA,EAAAA,KAACK,EAAAA,GAAS,CACRC,QAAuB,WAAdZ,EAAyB,SAAW,gBAC7Ca,MAAM,SACNd,GAAIA,EACJC,UAAWA,EAAUQ,SACN,WAAdR,GACCc,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAP,SAAA,EACEF,EAAAA,EAAAA,KAACU,EAAAA,EAAG,CAACC,KAAM,GAAGT,SACK,kBAATd,GAAoBY,EAAAA,EAAAA,KAACY,EAAAA,EAAO,CAACC,IAAKzB,EAAM0B,MAAM,QAAQC,OAAO,UAAa3B,KAEpFY,EAAAA,EAAAA,KAACU,EAAAA,EAAG,CAACC,KAAM,GAAGT,UACZM,EAAAA,EAAAA,MAACQ,EAAAA,GAAc,CAACC,WAAW,EAAKf,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,MAAAE,SAAKb,KACLW,EAAAA,EAAAA,KAACkB,EAAAA,GAAO,CAAAhB,SAAEZ,KACVU,EAAAA,EAAAA,KAACmB,EAAAA,GAAa,CAACF,WAAW,EAAKf,SACV,kBAAXV,GACNA,EAAO4B,KACL,CACEC,EAIA5B,KAGEO,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CAAUC,MAAOF,EAAKE,MAAOC,QAASA,IAAM7B,EAAS,SAASO,SAClEmB,EAAKhC,OADKI,OAOH,kBAAZF,IACNS,EAAAA,EAAAA,KAACyB,EAAAA,GAAc,CAACC,MAAO,CAAEC,eAAgB,SAAUC,SAAU,OAAQC,IAAK,QAAS3B,UACjFF,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACxB,QAAQ,SAASyB,OAAQ,CAAC,GAAI,IAAI7B,SACpCX,EAAQ6B,KACP,CACEC,EAKA5B,KAGEe,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAAUsB,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGT,MAAO,CAAEU,UAAW,UAAWlC,SAAA,EACzEF,EAAAA,EAAAA,KAACY,EAAAA,EAAO,CAACC,IAAKQ,EAAKjC,KAAM0B,MAAM,OAAOC,OAAO,UAC7Cf,EAAAA,EAAAA,KAACqC,EAAAA,GAAQ,CAAAnC,SAAEmB,EAAKhC,SAChBW,EAAAA,EAAAA,KAACsC,EAAAA,GAAO,CAAApC,SAAEmB,EAAK/B,YAHPG,kBAe5Be,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAP,SAAA,EACEF,EAAAA,EAAAA,KAACU,EAAAA,EAAG,CAACyB,GAAI,GAAID,GAAI,GAAID,GAAI,GAAID,GAAI,GAAG9B,SACjB,kBAATd,GAAoBY,EAAAA,EAAAA,KAACY,EAAAA,EAAO,CAACC,IAAKzB,EAAM0B,MAAM,OAAOC,OAAO,SAAY3B,KAElFY,EAAAA,EAAAA,KAACU,EAAAA,EAAG,CAACyB,GAAI,GAAID,GAAI,GAAID,GAAI,GAAID,GAAI,GAAG9B,UAClCM,EAAAA,EAAAA,MAACQ,EAAAA,GAAc,CAAAd,SAAA,EACbF,EAAAA,EAAAA,KAAA,MAAAE,SAAKb,KACLW,EAAAA,EAAAA,KAACkB,EAAAA,GAAO,CAAAhB,SAAEZ,IACK,UAAdI,GACCM,EAAAA,EAAAA,KAACmB,EAAAA,GAAa,CAAAjB,SACO,kBAAXV,GACNA,EAAO4B,KACL,CACEC,EAIA5B,KAGEO,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CAAUC,MAAOF,EAAKE,MAAOC,QAASA,IAAM7B,EAAS,SAASO,SAClEmB,EAAKhC,OADKI,QAQvBO,EAAAA,EAAAA,KAACyB,EAAAA,GAAc,CAAAvB,UACbF,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACxB,QAAQ,gBAAeJ,SACN,kBAAZX,GACNA,EAAQ6B,KACN,CACEC,EAKA5B,KAGEe,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAAUC,KAAM,GAAGT,SAAA,EACrBF,EAAAA,EAAAA,KAACY,EAAAA,EAAO,CAACC,IAAKQ,EAAKjC,KAAM0B,MAAM,OAAOC,OAAO,UAC7Cf,EAAAA,EAAAA,KAACqC,EAAAA,GAAQ,CAAAnC,SAAEmB,EAAKhC,SAChBW,EAAAA,EAAAA,KAACsC,EAAAA,GAAO,CAAApC,SAAEmB,EAAK/B,YAHPG,sBAiBrB,C,kDChJd,MAAM8C,GAAeC,E,KAAAA,IAAO,SAAPA,CAAgBC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sgBAU3BC,GAAMA,EAAEC,iBAAmB,yBAChCD,GAAMA,EAAEE,iBAAmB,8BACvBF,GAAMA,EAAEG,UAAY,SAClBH,GAAMA,EAAEI,YAAc,uBAGjBJ,GAAMA,EAAEK,aAAe,gCASzCL,IACD,OAAQA,EAAEM,SACR,IAAK,SACH,MAAM,wTAWR,IAAK,UACH,MAAM,oNAQR,QACE,MAAM,gKAMV,IAMUN,GAAMA,EAAEO,gBAAkB,SACfP,GAAMA,EAAEQ,YAAc,gCACtBR,GAAMA,EAAEQ,YAAc,2B,aC9DxC,MAAM7B,EAASnC,IAAA,IAAC,MAAEoC,EAAK,SAAErB,EAAQ,QAAEsB,EAAO,QAAEyB,EAAU,UAAS,MAAEvB,GAAoBvC,EAAA,OAC1Fa,EAAAA,EAAAA,KAACuC,EAAY,CAAChB,MAAOA,EAAOC,QAASA,EAASyB,QAASA,EAASvB,MAAOA,EAAMxB,SAC1EA,GACY,C","sources":["components/ContentBlock/index.tsx","common/Button/styles.ts","common/Button/index.tsx"],"sourcesContent":["import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n} from \"./styles\";\r\n\r\nconst ContentBlock = ({ icon, title, content, section, button, id, direction }: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={direction === \"center\" ? \"up\" : direction} triggerOnce>\r\n        <StyledRow\r\n          justify={direction === \"center\" ? \"center\" : \"space-between\"}\r\n          align=\"middle\"\r\n          id={id}\r\n          direction={direction}>\r\n          {direction === \"center\" ? (\r\n            <>\r\n              <Col span={24}>\r\n                {typeof icon === \"string\" ? <SvgIcon src={icon} width=\"200px\" height=\"200px\" /> : icon}\r\n              </Col>\r\n              <Col span={24}>\r\n                <ContentWrapper $centered={true}>\r\n                  <h6>{title}</h6>\r\n                  <Content>{content}</Content>\r\n                  <ButtonWrapper $centered={true}>\r\n                    {typeof button === \"object\" &&\r\n                      button.map(\r\n                        (\r\n                          item: {\r\n                            color?: string;\r\n                            title: string;\r\n                          },\r\n                          id: number\r\n                        ) => {\r\n                          return (\r\n                            <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                              {item.title}\r\n                            </Button>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </ButtonWrapper>\r\n                  {typeof section === \"object\" && (\r\n                    <ServiceWrapper style={{ justifyContent: \"center\", flexWrap: \"wrap\", gap: \"2rem\" }}>\r\n                      <Row justify=\"center\" gutter={[32, 32]}>\r\n                        {section.map(\r\n                          (\r\n                            item: {\r\n                              title: string;\r\n                              content: string;\r\n                              icon: string;\r\n                            },\r\n                            id: number\r\n                          ) => {\r\n                            return (\r\n                              <Col key={id} xs={24} sm={12} md={8} lg={6} style={{ textAlign: \"center\" }}>\r\n                                <SvgIcon src={item.icon} width=\"60px\" height=\"60px\" />\r\n                                <MinTitle>{item.title}</MinTitle>\r\n                                <MinPara>{item.content}</MinPara>\r\n                              </Col>\r\n                            );\r\n                          }\r\n                        )}\r\n                      </Row>\r\n                    </ServiceWrapper>\r\n                  )}\r\n                </ContentWrapper>\r\n              </Col>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Col lg={11} md={11} sm={12} xs={24}>\r\n                {typeof icon === \"string\" ? <SvgIcon src={icon} width=\"100%\" height=\"100%\" /> : icon}\r\n              </Col>\r\n              <Col lg={11} md={11} sm={11} xs={24}>\r\n                <ContentWrapper>\r\n                  <h6>{title}</h6>\r\n                  <Content>{content}</Content>\r\n                  {direction === \"right\" ? (\r\n                    <ButtonWrapper>\r\n                      {typeof button === \"object\" &&\r\n                        button.map(\r\n                          (\r\n                            item: {\r\n                              color?: string;\r\n                              title: string;\r\n                            },\r\n                            id: number\r\n                          ) => {\r\n                            return (\r\n                              <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                                {item.title}\r\n                              </Button>\r\n                            );\r\n                          }\r\n                        )}\r\n                    </ButtonWrapper>\r\n                  ) : (\r\n                    <ServiceWrapper>\r\n                      <Row justify=\"space-between\">\r\n                        {typeof section === \"object\" &&\r\n                          section.map(\r\n                            (\r\n                              item: {\r\n                                title: string;\r\n                                content: string;\r\n                                icon: string;\r\n                              },\r\n                              id: number\r\n                            ) => {\r\n                              return (\r\n                                <Col key={id} span={11}>\r\n                                  <SvgIcon src={item.icon} width=\"60px\" height=\"60px\" />\r\n                                  <MinTitle>{item.title}</MinTitle>\r\n                                  <MinPara>{item.content}</MinPara>\r\n                                </Col>\r\n                              );\r\n                            }\r\n                          )}\r\n                      </Row>\r\n                    </ServiceWrapper>\r\n                  )}\r\n                </ContentWrapper>\r\n              </Col>\r\n            </>\r\n          )}\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default ContentBlock;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled(\"button\")<{\r\n  backgroundColor?: string;\r\n  borderColor?: string;\r\n  normalTextColor?: string;\r\n  focusTextColor?: string;\r\n  fontSize?: string;\r\n  fontFamily?: string;\r\n  focusColor?: string;\r\n  variant?: \"default\" | \"compact\" | \"header\";\r\n}>`\r\n  background: ${(p) => p.backgroundColor || \"var(--color-primary)\"};\r\n  color: ${(p) => p.normalTextColor || \"var(--color-text-primary)\"};\r\n  font-size: ${(p) => p.fontSize || \"1rem\"};\r\n  font-family: ${(p) => p.fontFamily || \"var(--font-button)\"};\r\n  font-weight: 700;\r\n  width: 100%;\r\n  border: 1px solid ${(p) => p.borderColor || \"var(--color-text-secondary)\"};\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease-in-out;\r\n\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  /* Variant-based styling using CSS custom properties for scalability */\r\n  ${(p) => {\r\n    switch (p.variant) {\r\n      case \"header\":\r\n        return `\r\n          padding: 8px 16px;\r\n          height: 45px;\r\n          font-size: var(--size-header-nav);\r\n          margin-top: 0;\r\n          max-width: none;\r\n          width: auto;\r\n          box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n          display: inline-flex;\r\n          vertical-align: middle;\r\n        `;\r\n      case \"compact\":\r\n        return `\r\n          padding: 8px 16px;\r\n          height: 36px;\r\n          font-size: 0.875rem;\r\n          margin-top: 0.25rem;\r\n          max-width: 140px;\r\n          box-shadow: 0 8px 20px rgba(0,0,0,0.2);\r\n        `;\r\n      default:\r\n        return `\r\n          padding: 13px 0;\r\n          margin-top: 0.625rem;\r\n          max-width: 180px;\r\n          box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\r\n        `;\r\n    }\r\n  }}\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus {\r\n    color: ${(p) => p.focusTextColor || \"#fff\"};\r\n    border: 1px solid ${(p) => p.focusColor || \"var(--color-text-secondary)\"};\r\n    background-color: ${(p) => p.focusColor || \"var(--color-secondary)\"};\r\n    transform: translateY(-1px);\r\n  }\r\n`;\r\n","import { StyledButton } from \"./styles\";\r\nimport { ButtonProps } from \"../types\";\r\n\r\nexport const Button = ({ color, children, onClick, variant = \"default\", style }: ButtonProps) => (\r\n  <StyledButton color={color} onClick={onClick} variant={variant} style={style}>\r\n    {children}\r\n  </StyledButton>\r\n);\r\n"],"names":["_ref","icon","title","content","section","button","id","direction","scrollTo","document","getElementById","scrollIntoView","behavior","_jsx","ContentSection","children","Fade","triggerOnce","StyledRow","justify","align","_jsxs","_Fragment","Col","span","SvgIcon","src","width","height","ContentWrapper","$centered","Content","ButtonWrapper","map","item","Button","color","onClick","ServiceWrapper","style","justifyContent","flexWrap","gap","Row","gutter","xs","sm","md","lg","textAlign","MinTitle","MinPara","StyledButton","styled","_templateObject","_taggedTemplateLiteral","p","backgroundColor","normalTextColor","fontSize","fontFamily","borderColor","variant","focusTextColor","focusColor"],"sourceRoot":""}