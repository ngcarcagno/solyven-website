{"version":3,"file":"static/js/282.c0ca4f79.chunk.js","mappings":"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","sources":["components/ContentBlock/index.tsx"],"sourcesContent":["import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n  IconWithHalo,\r\n} from \"./styles\";\r\n\r\nconst ContentBlock = ({ icon, title, content, section, button, id, direction, customContent }: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={direction === \"center\" ? \"up\" : direction} triggerOnce>\r\n        <StyledRow\r\n          justify={direction === \"center\" ? \"center\" : \"space-between\"}\r\n          align=\"middle\"\r\n          id={id}\r\n          direction={direction}>\r\n          {direction === \"center\" ? (\r\n            <>\r\n              <Col span={24} className=\"content-block-icon\" style={{ flex: \"0 0 auto\" }}>\r\n                {typeof icon === \"string\" ? (\r\n                  icon.endsWith(\".png\") || icon.endsWith(\".jpg\") || icon.endsWith(\".jpeg\") ? (\r\n                    <IconWithHalo>\r\n                      <img src={`${process.env.PUBLIC_URL}/img/png/${icon}`} alt=\"\" className=\"responsive-icon-img\" />\r\n                    </IconWithHalo>\r\n                  ) : (\r\n                    <SvgIcon src={icon} width=\"min(200px, 25vh)\" height=\"min(200px, 25vh)\" />\r\n                  )\r\n                ) : (\r\n                  icon\r\n                )}\r\n              </Col>\r\n              <Col\r\n                span={24}\r\n                style={{\r\n                  flex: \"1\",\r\n                  minHeight: 0,\r\n                  overflow: \"visible\",\r\n                }}>\r\n                <ContentWrapper $centered={true}>\r\n                  {title && <h6>{title}</h6>}\r\n                  {content && <Content>{content}</Content>}\r\n                  {customContent}\r\n                  <ButtonWrapper $centered={true}>\r\n                    {typeof button === \"object\" &&\r\n                      button.map(\r\n                        (\r\n                          item: {\r\n                            color?: string;\r\n                            title: string;\r\n                          },\r\n                          id: number\r\n                        ) => {\r\n                          return (\r\n                            <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                              {item.title}\r\n                            </Button>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </ButtonWrapper>\r\n                  {typeof section === \"object\" && (\r\n                    <ServiceWrapper style={{ justifyContent: \"center\", flexWrap: \"wrap\", gap: \"2rem\" }}>\r\n                      <Row justify=\"center\" gutter={[32, 32]}>\r\n                        {section.map(\r\n                          (\r\n                            item: {\r\n                              title: string;\r\n                              content: string;\r\n                              icon: string;\r\n                            },\r\n                            id: number\r\n                          ) => {\r\n                            return (\r\n                              <Col key={id} xs={24} sm={12} md={8} lg={6} style={{ textAlign: \"center\" }}>\r\n                                <SvgIcon src={item.icon} width=\"60px\" height=\"60px\" />\r\n                                <MinTitle>{item.title}</MinTitle>\r\n                                <MinPara>{item.content}</MinPara>\r\n                              </Col>\r\n                            );\r\n                          }\r\n                        )}\r\n                      </Row>\r\n                    </ServiceWrapper>\r\n                  )}\r\n                </ContentWrapper>\r\n              </Col>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Col lg={11} md={11} sm={12} xs={24} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                {typeof icon === \"string\" ? (\r\n                  icon.endsWith(\".png\") || icon.endsWith(\".jpg\") || icon.endsWith(\".jpeg\") ? (\r\n                    <img\r\n                      src={`${process.env.PUBLIC_URL}/img/png/${icon}`}\r\n                      alt=\"\"\r\n                      style={{\r\n                        width: \"min(100%, 40vh)\",\r\n                        height: \"min(100%, 40vh)\",\r\n                        objectFit: \"contain\",\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    <SvgIcon src={icon} width=\"min(100%, 40vh)\" height=\"min(100%, 40vh)\" />\r\n                  )\r\n                ) : (\r\n                  icon\r\n                )}\r\n              </Col>\r\n              <Col lg={11} md={11} sm={11} xs={24} style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <ContentWrapper style={{ flex: \"1\", display: \"flex\", flexDirection: \"column\" }}>\r\n                  <h6>{title}</h6>\r\n                  <Content>{content}</Content>\r\n                  {customContent}\r\n                  {direction === \"right\" ? (\r\n                    <ButtonWrapper>\r\n                      {typeof button === \"object\" &&\r\n                        button.map(\r\n                          (\r\n                            item: {\r\n                              color?: string;\r\n                              title: string;\r\n                            },\r\n                            id: number\r\n                          ) => {\r\n                            return (\r\n                              <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                                {item.title}\r\n                              </Button>\r\n                            );\r\n                          }\r\n                        )}\r\n                    </ButtonWrapper>\r\n                  ) : (\r\n                    <ServiceWrapper>\r\n                      <Row justify=\"space-between\">\r\n                        {typeof section === \"object\" &&\r\n                          section.map(\r\n                            (\r\n                              item: {\r\n                                title: string;\r\n                                content: string;\r\n                                icon: string;\r\n                              },\r\n                              id: number\r\n                            ) => {\r\n                              return (\r\n                                <Col key={id} span={11}>\r\n                                  <SvgIcon src={item.icon} width=\"60px\" height=\"60px\" />\r\n                                  <MinTitle>{item.title}</MinTitle>\r\n                                  <MinPara>{item.content}</MinPara>\r\n                                </Col>\r\n                              );\r\n                            }\r\n                          )}\r\n                      </Row>\r\n                    </ServiceWrapper>\r\n                  )}\r\n                </ContentWrapper>\r\n              </Col>\r\n            </>\r\n          )}\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default ContentBlock;\r\n"],"names":["_ref","icon","title","content","section","button","id","direction","customContent","scrollTo","document","getElementById","scrollIntoView","behavior","_jsx","ContentSection","children","Fade","triggerOnce","StyledRow","justify","align","_jsxs","_Fragment","Col","span","className","style","flex","endsWith","IconWithHalo","src","concat","process","alt","SvgIcon","width","height","minHeight","overflow","ContentWrapper","$centered","Content","ButtonWrapper","map","item","Button","color","onClick","ServiceWrapper","justifyContent","flexWrap","gap","Row","gutter","xs","sm","md","lg","textAlign","MinTitle","MinPara","display","alignItems","objectFit","flexDirection"],"sourceRoot":""}