{"version":3,"file":"static/js/147.01bfcef0.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx","components/TexComponents/DecryptedText.js","components/FullViewport/FullViewport.tsx","components/FullViewport/FullViewportSection.tsx","components/ContentBlock/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\n\r\n// Safe notification wrapper: some environments or HMR states may not expose antd's\r\n// notification object synchronously, so guard against undefined and fallback to console.\r\nconst safeNotify = (type: \"success\" | \"error\" | \"warning\", opts: { message?: string; description?: string }) => {\r\n  // Prefer calling the real antd notification if available (restores visual toasts).\r\n  try {\r\n    const fn = (notification as any)?.[type];\r\n    if (typeof fn === \"function\") {\r\n      fn(opts);\r\n      return;\r\n    }\r\n  } catch (err) {\r\n    // ignore and fallback to console\r\n  }\r\n\r\n  // Fallback to console logging for development if notification isn't ready\r\n  if (type === \"error\") console.error(opts.message, opts.description);\r\n  else if (type === \"warning\") console.warn(opts.message, opts.description);\r\n  else console.log(opts.message, opts.description);\r\n};\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n    isSubmitting: boolean;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n    isSubmitting: false,\r\n  });\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prev) => ({ ...prev, errors }));\r\n\r\n    if (!Object.values(errors).every((error) => error === \"\")) {\r\n      return;\r\n    }\r\n\r\n    setFormState((prev) => ({ ...prev, isSubmitting: true }));\r\n\r\n    // Prefer using an env var so sensitive endpoints are not hard-coded.\r\n    // For Create-React-App: set REACT_APP_CONTACT_API. For Next.js use NEXT_PUBLIC_CONTACT_API.\r\n    const url = (process.env.REACT_APP_CONTACT_API || (process.env.NEXT_PUBLIC_CONTACT_API as string) || \"\").trim();\r\n\r\n    try {\r\n      if (!url) {\r\n        // Developer-friendly behavior: warn in console and show a notice so the form can be tested visually.\r\n        // In production you should configure an API endpoint that sends the email server-side.\r\n        // eslint-disable-next-line no-console\r\n        console.warn(\"Contact form: no endpoint configured. Form values:\", values);\r\n        safeNotify(\"warning\", {\r\n          message: \"Formulario no configurado\",\r\n          description:\r\n            \"No se ha configurado REACT_APP_CONTACT_API (o NEXT_PUBLIC_CONTACT_API). Los datos no se envían; revisa la consola.\",\r\n        });\r\n\r\n        // Simulate success so the UI behaves as if submission occurred (useful during dev)\r\n        event.currentTarget.reset();\r\n        setFormState({ values: { ...initialValues }, errors: { ...initialValues }, isSubmitting: false });\r\n        safeNotify(\"success\", {\r\n          message: \"Enviado (simulado)\",\r\n          description: \"No hay endpoint configurado — esto es una simulación para pruebas locales.\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(values),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        safeNotify(\"error\", {\r\n          message: \"Error\",\r\n          description: \"Hubo un error al enviar tu mensaje. Por favor intenta de nuevo más tarde.\",\r\n        });\r\n      } else {\r\n        // reset form\r\n        event.currentTarget.reset();\r\n        setFormState({ values: { ...initialValues }, errors: { ...initialValues }, isSubmitting: false });\r\n        safeNotify(\"success\", {\r\n          message: \"¡Enviado!\",\r\n          description: \"Tu mensaje ha sido enviado correctamente.\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      safeNotify(\"error\", {\r\n        message: \"Error\",\r\n        description: \"Error al enviar el formulario. Por favor intenta de nuevo más tarde.\",\r\n      });\r\n    } finally {\r\n      setFormState((prev) => ({ ...prev, isSubmitting: false }));\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n    isSubmitting: formState.isSubmitting,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 0.625em 0.3125em; /* Proportional padding */\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875em; /* Proportional font size */\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 0.5em 0.25em; /* Proportional padding */\r\n  margin-bottom: 0.25em; /* Keep a small gap below the textarea */\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: vertical;\r\n  font-size: 0.98rem; /* Slightly larger for readability */\r\n  height: auto;\r\n  min-height: 5.5rem; /* Ensure at least ~2 visible rows comfortably */\r\n  max-height: 28vh; /* Prevent the textarea from growing too tall */\r\n\r\n  /* For short viewports, keep the textarea at a reasonable minimum but\r\n     reduce spacing elsewhere (handled in FormGroup) so textarea stays usable. */\r\n  @media only screen and (max-height: 950px) {\r\n    min-height: 4.2rem; /* still approx two rows */\r\n    max-height: 22vh;\r\n  }\r\n\r\n  @media only screen and (max-height: 500px) {\r\n    min-height: 4rem;\r\n    max-height: 20vh;\r\n  }\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 0.625em; /* Proportional padding */\r\n  text-transform: capitalize;\r\n`;\r\n","import { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, value, type = \"text\", label }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{label || name}</Label>\r\n    <StyledInput placeholder={placeholder} name={name} id={name} onChange={onChange} value={value} type={type} />\r\n  </Container>\r\n);\r\n\r\nexport default Input;\r\n","import { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst TextArea = ({ name, placeholder, onChange, value, label }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{label || name}</Label>\r\n    <StyledTextArea placeholder={placeholder} id={name} name={name} onChange={onChange} value={value} />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default TextArea;\r\n","import styled from \"styled-components\";\r\n\r\n/* Solo estilos específicos del formulario - ContentBlock maneja el layout */\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  /* Formulario limpio que funciona dentro de ContentBlock */\r\n  width: 100%;\r\n  /* Allow the form to grow horizontally but cap to a comfortable max */\r\n  max-width: min(820px, 86vw);\r\n  margin: 1.2em auto 0; /* Slightly tighter top margin */\r\n  box-sizing: border-box;\r\n  flex: 1;\r\n  min-height: 0; /* Permite que se comprima si es necesario */\r\n\r\n  /* Layout interno del formulario */\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1em;\r\n\r\n  /* glass effect */\r\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.04));\r\n  border-radius: 1em;\r\n  border: 1px solid rgba(255, 255, 255, 0.12);\r\n  backdrop-filter: blur(10px);\r\n  -webkit-backdrop-filter: blur(10px);\r\n  box-shadow: 0 0.875em 2.125em rgba(0, 0, 0, 0.65);\r\n  padding: 1.1em;\r\n  transition: transform 240ms ease, box-shadow 240ms ease;\r\n\r\n  /* Responsive para pantallas medianas-altas (ej: 1536x864) */\r\n  /* On wide screens with limited height, allow more horizontal room while keeping vertical\r\n     constraints. The form will use a larger max-width but reduce padding/gap to fit. */\r\n  @media only screen and (min-width: 1200px) and (max-height: 950px) {\r\n    max-width: min(760px, 72vw);\r\n    padding: 0.85em;\r\n    gap: 0.7em;\r\n    font-size: 0.98em;\r\n  }\r\n  @media only screen and (min-width: 1200px) and (max-height: 900px) {\r\n    max-width: min(700px, 70vw);\r\n    padding: 0.75em;\r\n    gap: 0.6em;\r\n    font-size: 0.97em;\r\n  }\r\n  /* Mobile: más compacto */\r\n  @media only screen and (max-width: 768px) {\r\n    padding: 1em;\r\n    gap: 0.75em;\r\n    max-width: 90vw;\r\n  }\r\n\r\n  /* Efecto hover */\r\n  &:hover {\r\n    transform: translateY(-0.25em);\r\n    box-shadow: 0 1.25em 3em rgba(0, 0, 0, 0.7);\r\n  }\r\n\r\n  @media only screen and (max-width: 480px) {\r\n    max-width: 95vw;\r\n    padding: 1em;\r\n    gap: 1em;\r\n  }\r\n\r\n  /* Para pantallas de altura limitada (funciona desde 950px hacia abajo) */\r\n  @media only screen and (max-height: 950px) {\r\n    padding: 0.6em;\r\n    gap: 0.35em; /* much tighter vertical spacing */\r\n    margin: 0.4em auto 0; /* Menos margen superior */\r\n    /* Constrain by available viewport space but leave room for header + CTA */\r\n    max-height: calc(100dvh - var(--header-height) - 100px);\r\n    overflow-y: auto; /* Scroll interno si es muy necesario */\r\n  }\r\n\r\n  /* Para pantallas muy pequeñas de altura */\r\n  @media only screen and (max-height: 500px) {\r\n    padding: 0.75em;\r\n    gap: 0.5em;\r\n    margin: 0.5em auto 0;\r\n  }\r\n\r\n  @media only screen and (max-height: 400px) {\r\n    padding: 0.5em;\r\n    gap: 0.25em;\r\n    margin: 0.25em auto 0;\r\n  }\r\n\r\n  /* Aggressive compaction for very short viewports: remove gaps between fields to free vertical space\r\n     while keeping each control usable. This is intentionally scoped to very short heights. */\r\n  @media only screen and (max-height: 900px) {\r\n    gap: 0.15em !important;\r\n    margin: 0.3em auto 0 !important;\r\n\r\n    label {\r\n      margin-bottom: 0.08rem !important;\r\n      font-size: 0.92rem !important;\r\n    }\r\n\r\n    input,\r\n    textarea {\r\n      padding: 0.42em 0.5em !important;\r\n    }\r\n\r\n    /* tighten button spacing */\r\n    ${/* scoper for ButtonContainer since it's sibling inside FormGroup */ \"\"}\r\n    & > div[role='button'],\r\n    & ${\"\"} > .ant-btn,\r\n    & .ant-btn {\r\n      padding: 0.5em 0.8em !important;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    transform: translateY(-0.25em);\r\n    box-shadow: 0 1.25em 3em rgba(0, 0, 0, 0.7);\r\n  }\r\n\r\n  /* Ant Col takes full width */\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  /* Input styles */\r\n  input,\r\n  textarea {\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    background: rgba(255, 255, 255, 0.03);\r\n    border-radius: 0.5em;\r\n    border: 1px solid rgba(255, 255, 255, 0.06);\r\n    padding: 0.75em 1em;\r\n    color: var(--color-text-primary);\r\n    outline: none;\r\n    transition: box-shadow 180ms ease, border-color 180ms ease, background 180ms ease;\r\n  }\r\n\r\n  input::placeholder,\r\n  textarea::placeholder {\r\n    color: rgba(255, 255, 255, 0.55);\r\n  }\r\n\r\n  input:focus,\r\n  textarea:focus {\r\n    border-color: rgba(255, 130, 92, 0.95);\r\n    box-shadow: 0 0.375em 1.125em rgba(255, 130, 92, 0.1);\r\n    background: rgba(255, 255, 255, 0.04);\r\n  }\r\n\r\n  label {\r\n    display: block;\r\n    margin-bottom: 0.25em;\r\n    color: rgba(255, 255, 255, 0.9);\r\n    font-weight: 600;\r\n  }\r\n\r\n  /* Para pantallas de altura limitada */\r\n  @media only screen and (max-height: 950px) {\r\n    input,\r\n    textarea {\r\n      padding: 0.5em 0.75em; /* Padding más compacto */\r\n    }\r\n\r\n    label {\r\n      margin-bottom: 0.15em; /* Menos espacio entre label e input */\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: var(--color-secondary);\r\n  height: 1em;\r\n  padding: 0 0.5em;\r\n  font-size: 0.875em;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n  margin-top: 0.5em;\r\n\r\n  button {\r\n    border-radius: 0.5em;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n\r\n    button {\r\n      width: 100%;\r\n      padding: 0.875em 1em;\r\n    }\r\n  }\r\n`;\r\n","import { Col } from \"antd\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport ContentBlock from \"../ContentBlock\";\r\nimport { FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit, isSubmitting } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  // El formulario como contenido personalizado para ContentBlock\r\n  const contactFormContent = (\r\n    <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n      <Col span={24}>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          label=\"Nombre\"\r\n          placeholder=\"Tu Nombre\"\r\n          value={values.name || \"\"}\r\n          onChange={handleChange}\r\n        />\r\n        <ValidationType type=\"name\" />\r\n      </Col>\r\n      <Col span={24}>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          placeholder=\"Tu Correo Electrónico\"\r\n          value={values.email || \"\"}\r\n          onChange={handleChange}\r\n        />\r\n        <ValidationType type=\"email\" />\r\n      </Col>\r\n      <Col span={24}>\r\n        <TextArea\r\n          placeholder=\"Tu Mensaje\"\r\n          value={values.message || \"\"}\r\n          name=\"message\"\r\n          label=\"Mensaje\"\r\n          onChange={handleChange}\r\n        />\r\n        <ValidationType type=\"message\" />\r\n      </Col>\r\n      <ButtonContainer>\r\n        <Button type=\"submit\" disabled={isSubmitting}>\r\n          {isSubmitting ? \"Enviando...\" : \"Enviar\"}\r\n        </Button>\r\n      </ButtonContainer>\r\n    </FormGroup>\r\n  );\r\n\r\n  return <ContentBlock direction=\"center\" title={title} content={content} id={id} customContent={contactFormContent} />;\r\n};\r\n\r\nexport default Contact;\r\n","import { useEffect, useState, useRef } from \"react\";\r\nimport { motion } from \"motion/react\";\r\n\r\nconst styles = {\r\n  wrapper: {\r\n    display: \"inline-block\",\r\n    whiteSpace: \"pre-wrap\",\r\n  },\r\n  srOnly: {\r\n    position: \"absolute\",\r\n    width: \"1px\",\r\n    height: \"1px\",\r\n    padding: 0,\r\n    margin: \"-1px\",\r\n    overflow: \"hidden\",\r\n    clip: \"rect(0,0,0,0)\",\r\n    border: 0,\r\n  },\r\n};\r\n\r\nexport default function DecryptedText({\r\n  text,\r\n  speed = 50,\r\n  maxIterations = 10,\r\n  sequential = false,\r\n  revealDirection = \"start\",\r\n  useOriginalCharsOnly = false,\r\n  characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!@#$%^&*()_+\",\r\n  className = \"\",\r\n  parentClassName = \"\",\r\n  encryptedClassName = \"\",\r\n  animateOn = \"hover\",\r\n  forceOnMount = false,\r\n  ...props\r\n}) {\r\n  const [displayText, setDisplayText] = useState(text);\r\n  const [isHovering, setIsHovering] = useState(false);\r\n  const [isScrambling, setIsScrambling] = useState(false);\r\n  const [revealedIndices, setRevealedIndices] = useState(new Set());\r\n  const [hasAnimated, setHasAnimated] = useState(false);\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    let currentIteration = 0;\r\n\r\n    // Si forceOnMount está activo, forzar animación al montar\r\n    if (forceOnMount && !hasAnimated) {\r\n      setIsHovering(true);\r\n      setHasAnimated(true);\r\n    }\r\n\r\n    const getNextIndex = (revealedSet) => {\r\n      const textLength = text.length;\r\n      switch (revealDirection) {\r\n        case \"start\":\r\n          return revealedSet.size;\r\n        case \"end\":\r\n          return textLength - 1 - revealedSet.size;\r\n        case \"center\": {\r\n          const middle = Math.floor(textLength / 2);\r\n          const offset = Math.floor(revealedSet.size / 2);\r\n          const nextIndex = revealedSet.size % 2 === 0 ? middle + offset : middle - offset - 1;\r\n\r\n          if (nextIndex >= 0 && nextIndex < textLength && !revealedSet.has(nextIndex)) {\r\n            return nextIndex;\r\n          }\r\n\r\n          for (let i = 0; i < textLength; i++) {\r\n            if (!revealedSet.has(i)) return i;\r\n          }\r\n          return 0;\r\n        }\r\n        default:\r\n          return revealedSet.size;\r\n      }\r\n    };\r\n\r\n    const availableChars = useOriginalCharsOnly\r\n      ? Array.from(new Set(text.split(\"\"))).filter((char) => char !== \" \")\r\n      : characters.split(\"\");\r\n\r\n    const shuffleText = (originalText, currentRevealed) => {\r\n      if (useOriginalCharsOnly) {\r\n        const positions = originalText.split(\"\").map((char, i) => ({\r\n          char,\r\n          isSpace: char === \" \",\r\n          index: i,\r\n          isRevealed: currentRevealed.has(i),\r\n        }));\r\n\r\n        const nonSpaceChars = positions.filter((p) => !p.isSpace && !p.isRevealed).map((p) => p.char);\r\n\r\n        for (let i = nonSpaceChars.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          [nonSpaceChars[i], nonSpaceChars[j]] = [nonSpaceChars[j], nonSpaceChars[i]];\r\n        }\r\n\r\n        let charIndex = 0;\r\n        return positions\r\n          .map((p) => {\r\n            if (p.isSpace) return \" \";\r\n            if (p.isRevealed) return originalText[p.index];\r\n            return nonSpaceChars[charIndex++];\r\n          })\r\n          .join(\"\");\r\n      } else {\r\n        return originalText\r\n          .split(\"\")\r\n          .map((char, i) => {\r\n            if (char === \" \") return \" \";\r\n            if (currentRevealed.has(i)) return originalText[i];\r\n            return availableChars[Math.floor(Math.random() * availableChars.length)];\r\n          })\r\n          .join(\"\");\r\n      }\r\n    };\r\n\r\n    if (isHovering) {\r\n      setIsScrambling(true);\r\n      interval = setInterval(() => {\r\n        setRevealedIndices((prevRevealed) => {\r\n          if (sequential) {\r\n            if (prevRevealed.size < text.length) {\r\n              const nextIndex = getNextIndex(prevRevealed);\r\n              const newRevealed = new Set(prevRevealed);\r\n              newRevealed.add(nextIndex);\r\n              setDisplayText(shuffleText(text, newRevealed));\r\n              return newRevealed;\r\n            } else {\r\n              clearInterval(interval);\r\n              setIsScrambling(false);\r\n              return prevRevealed;\r\n            }\r\n          } else {\r\n            setDisplayText(shuffleText(text, prevRevealed));\r\n            currentIteration++;\r\n            if (currentIteration >= maxIterations) {\r\n              clearInterval(interval);\r\n              setIsScrambling(false);\r\n              setDisplayText(text);\r\n            }\r\n            return prevRevealed;\r\n          }\r\n        });\r\n      }, speed);\r\n    } else {\r\n      setDisplayText(text);\r\n      setRevealedIndices(new Set());\r\n      setIsScrambling(false);\r\n    }\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  }, [isHovering, text, speed, maxIterations, sequential, revealDirection, characters, useOriginalCharsOnly]);\r\n\r\n  useEffect(() => {\r\n    if (animateOn !== \"view\" && animateOn !== \"both\") return;\r\n\r\n    const observerCallback = (entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting && !hasAnimated) {\r\n          setIsHovering(true);\r\n          setHasAnimated(true);\r\n        }\r\n      });\r\n    };\r\n\r\n    const observerOptions = {\r\n      root: null,\r\n      rootMargin: \"0px\",\r\n      threshold: 0.1,\r\n    };\r\n\r\n    const observer = new IntersectionObserver(observerCallback, observerOptions);\r\n    const currentRef = containerRef.current;\r\n    if (currentRef) {\r\n      observer.observe(currentRef);\r\n    }\r\n\r\n    return () => {\r\n      if (currentRef) {\r\n        observer.unobserve(currentRef);\r\n      }\r\n    };\r\n  }, [animateOn, hasAnimated]);\r\n\r\n  const hoverProps =\r\n    animateOn === \"hover\" || animateOn === \"both\"\r\n      ? {\r\n          onMouseEnter: () => setIsHovering(true),\r\n          onMouseLeave: () => setIsHovering(false),\r\n        }\r\n      : {};\r\n\r\n  return (\r\n    <motion.span className={parentClassName} ref={containerRef} style={styles.wrapper} {...hoverProps} {...props}>\r\n      <span style={styles.srOnly}>{displayText}</span>\r\n\r\n      <span aria-hidden=\"true\">\r\n        {displayText.split(\"\").map((char, index) => {\r\n          const isRevealedOrDone = revealedIndices.has(index) || !isScrambling || !isHovering;\r\n\r\n          return (\r\n            <span key={index} className={isRevealedOrDone ? className : encryptedClassName}>\r\n              {char}\r\n            </span>\r\n          );\r\n        })}\r\n      </span>\r\n    </motion.span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Full = styled.section`\r\n  width: 100%;\r\n  display: block;\r\n  height: 100dvh;\r\n`;\r\n\r\ninterface FullViewportProps {\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst FullViewport = ({ children, className }: FullViewportProps) => (\r\n  <Full className={className} data-full-viewport=\"true\">\r\n    {children}\r\n  </Full>\r\n);\r\n\r\nexport default FullViewport;\r\n","import styled from \"styled-components\";\r\nimport FullViewport from \"./FullViewport\";\r\n\r\nconst FullViewportSection = styled(FullViewport)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default FullViewportSection;\r\n","import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport DecryptedText from \"../TexComponents/DecryptedText\";\r\nimport SplitText from \"../TexComponents/SplitText/SplitText\";\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n  IconWithHalo,\r\n  SectionIconWrap,\r\n} from \"./styles\";\r\nimport FullViewportSection from \"../FullViewport/FullViewportSection\";\r\n\r\nconst ContentBlock = ({\r\n  icon,\r\n  title,\r\n  content,\r\n  section,\r\n  button,\r\n  id,\r\n  direction,\r\n  customContent,\r\n  animation,\r\n}: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n  const isCenter = direction === \"center\";\r\n  // For center sections we wrap the ContentSection inside FullViewportSection (structural)\r\n  if (direction === \"center\") {\r\n    return (\r\n      <FullViewportSection>\r\n        <ContentSection>\r\n          <Fade direction=\"up\" triggerOnce>\r\n            <StyledRow justify=\"center\" align=\"middle\" id={id} direction={direction}>\r\n              {/* Single column with icon + content together */}\r\n              <Col\r\n                span={24}\r\n                style={{\r\n                  flex: \"1\",\r\n                  minHeight: 0,\r\n                  overflow: \"visible\",\r\n                }}>\r\n                <ContentWrapper $centered={true}>\r\n                  <div className=\"content-block-icon\">\r\n                    <SectionIconWrap>\r\n                      {typeof icon === \"string\" ? (\r\n                        icon.endsWith(\".png\") || icon.endsWith(\".jpg\") || icon.endsWith(\".jpeg\") ? (\r\n                          <IconWithHalo>\r\n                            <img\r\n                              src={`${process.env.PUBLIC_URL}/img/png/${icon}`}\r\n                              alt=\"\"\r\n                              className=\"responsive-icon-img\"\r\n                            />\r\n                          </IconWithHalo>\r\n                        ) : (\r\n                          <SvgIcon src={icon} width=\"min(200px, 25vh)\" height=\"min(200px, 25vh)\" />\r\n                        )\r\n                      ) : (\r\n                        icon\r\n                      )}\r\n                    </SectionIconWrap>\r\n                  </div>\r\n\r\n                  {title && (\r\n                    <h6>\r\n                      <DecryptedText\r\n                        text={title}\r\n                        animateOn=\"view\"\r\n                        revealDirection=\"center\"\r\n                        speed={45}\r\n                        maxIterations={30}\r\n                        forceOnMount={true}\r\n                      />\r\n                    </h6>\r\n                  )}\r\n                  {content && (\r\n                    <Content>\r\n                      <span>{content}</span>\r\n                    </Content>\r\n                  )}\r\n                  {customContent}\r\n                  <ButtonWrapper $centered={true}>\r\n                    {typeof button === \"object\" &&\r\n                      button.map((item: any, id: number) => (\r\n                        <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                          {item.title}\r\n                        </Button>\r\n                      ))}\r\n                  </ButtonWrapper>\r\n                </ContentWrapper>\r\n              </Col>\r\n            </StyledRow>\r\n          </Fade>\r\n        </ContentSection>\r\n      </FullViewportSection>\r\n    );\r\n  }\r\n\r\n  // Non-center directions keep the original layout\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={isCenter ? \"up\" : direction} triggerOnce>\r\n        <StyledRow justify={isCenter ? \"center\" : \"space-between\"} align=\"middle\" id={id} direction={direction}>\r\n          {/* ...existing non-center layout... */}\r\n          <>\r\n            <Col lg={11} md={11} sm={12} xs={24} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              {typeof icon === \"string\" ? (\r\n                icon.endsWith(\".png\") || icon.endsWith(\".jpg\") || icon.endsWith(\".jpeg\") ? (\r\n                  <img\r\n                    src={`${process.env.PUBLIC_URL}/img/png/${icon}`}\r\n                    alt=\"\"\r\n                    style={{\r\n                      width: \"min(100%, 40vh)\",\r\n                      height: \"min(100%, 40vh)\",\r\n                      objectFit: \"contain\",\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <SvgIcon src={icon} width=\"min(100%, 40vh)\" height=\"min(100%, 40vh)\" />\r\n                )\r\n              ) : (\r\n                icon\r\n              )}\r\n            </Col>\r\n            <Col lg={11} md={11} sm={11} xs={24} style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <ContentWrapper style={{ flex: \"1\", display: \"flex\", flexDirection: \"column\" }}>\r\n                <h6>\r\n                  <DecryptedText\r\n                    text={title}\r\n                    animateOn=\"view\"\r\n                    revealDirection=\"center\"\r\n                    speed={45}\r\n                    maxIterations={30}\r\n                    forceOnMount={true}\r\n                  />\r\n                </h6>\r\n                <Content>\r\n                  <span>{content}</span>\r\n                </Content>\r\n                {customContent}\r\n                {direction === \"right\" ? (\r\n                  <ButtonWrapper>\r\n                    {typeof button === \"object\" &&\r\n                      button.map((item: any, id: number) => (\r\n                        <Button key={id} color={item.color} onClick={() => scrollTo(\"about\")}>\r\n                          {item.title}\r\n                        </Button>\r\n                      ))}\r\n                  </ButtonWrapper>\r\n                ) : (\r\n                  <ServiceWrapper>\r\n                    <Row justify=\"space-between\">\r\n                      {typeof section === \"object\" &&\r\n                        section.map((item: any, id: number) => (\r\n                          <Col key={id} span={11}>\r\n                            <SvgIcon src={item.icon} width=\"60px\" height=\"60px\" />\r\n                            <MinTitle>{item.title}</MinTitle>\r\n                            <MinPara>{item.content}</MinPara>\r\n                          </Col>\r\n                        ))}\r\n                    </Row>\r\n                  </ServiceWrapper>\r\n                )}\r\n              </ContentWrapper>\r\n            </Col>\r\n          </>\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default ContentBlock;\r\n"],"names":["safeNotify","type","opts","fn","notification","err","console","error","message","description","warn","log","initialValues","name","email","validate","values","errors","test","Container","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","StyledContainer","StyledTextArea","Label","_templateObject3","_ref","placeholder","onChange","value","label","_jsxs","children","_jsx","htmlFor","id","FormGroup","Span","ButtonContainer","title","content","handleChange","handleSubmit","isSubmitting","formState","setFormState","useState","_objectSpread","event","target","prevState","async","preventDefault","prev","Object","every","url","process","REACT_APP_CONTACT_API","NEXT_PUBLIC_CONTACT_API","trim","currentTarget","reset","fetch","method","headers","body","JSON","stringify","ok","useForm","ValidationType","_ref2","ErrorMessage","contactFormContent","autoComplete","onSubmit","Col","span","Input","TextArea","Button","disabled","ContentBlock","direction","customContent","styles","wrapper","display","whiteSpace","srOnly","position","width","height","padding","margin","overflow","clip","border","DecryptedText","text","speed","maxIterations","sequential","revealDirection","useOriginalCharsOnly","characters","className","parentClassName","encryptedClassName","animateOn","forceOnMount","props","_objectWithoutProperties","_excluded","displayText","setDisplayText","isHovering","setIsHovering","isScrambling","setIsScrambling","revealedIndices","setRevealedIndices","Set","hasAnimated","setHasAnimated","containerRef","useRef","useEffect","interval","currentIteration","availableChars","Array","from","split","filter","char","shuffleText","originalText","currentRevealed","positions","map","i","isSpace","index","isRevealed","has","nonSpaceChars","p","length","j","Math","floor","random","charIndex","join","setInterval","prevRevealed","size","nextIndex","revealedSet","textLength","middle","offset","getNextIndex","newRevealed","add","clearInterval","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","root","rootMargin","threshold","currentRef","current","observe","unobserve","hoverProps","onMouseEnter","onMouseLeave","motion","ref","style","isRevealedOrDone","Full","section","FullViewport","icon","button","animation","scrollTo","document","getElementById","scrollIntoView","behavior","isCenter","FullViewportSection","ContentSection","Fade","triggerOnce","StyledRow","justify","align","flex","minHeight","ContentWrapper","$centered","SectionIconWrap","endsWith","IconWithHalo","src","concat","alt","SvgIcon","Content","ButtonWrapper","item","color","onClick","_Fragment","lg","md","sm","xs","alignItems","objectFit","flexDirection","ServiceWrapper","Row","MinTitle","MinPara"],"sourceRoot":""}